//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StoreMaga0101.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.Iservice")]
    public interface Iservice {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/SENDUSERTOSERVER", ReplyAction="http://tempuri.org/Iservice/SENDUSERTOSERVERResponse")]
        void SENDUSERTOSERVER(int falg, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/SENDUSERTOSERVER", ReplyAction="http://tempuri.org/Iservice/SENDUSERTOSERVERResponse")]
        System.Threading.Tasks.Task SENDUSERTOSERVERAsync(int falg, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/LoginUser", ReplyAction="http://tempuri.org/Iservice/LoginUserResponse")]
        int LoginUser(string User, string Pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/LoginUser", ReplyAction="http://tempuri.org/Iservice/LoginUserResponse")]
        System.Threading.Tasks.Task<int> LoginUserAsync(string User, string Pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewUser", ReplyAction="http://tempuri.org/Iservice/AddNewUserResponse")]
        int AddNewUser(
                    string name, 
                    string user, 
                    string pass, 
                    bool Addsupply, 
                    bool UpdSupply, 
                    bool Addoutt, 
                    bool updOut, 
                    bool PrintSupply, 
                    bool PrintOut, 
                    bool PrintQuntity, 
                    bool UpdSupp1, 
                    bool UpdOut1, 
                    bool userAdd, 
                    bool Active, 
                    bool Cate, 
                    bool type1, 
                    bool account, 
                    bool Monay, 
                    bool Place, 
                    int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewUser", ReplyAction="http://tempuri.org/Iservice/AddNewUserResponse")]
        System.Threading.Tasks.Task<int> AddNewUserAsync(
                    string name, 
                    string user, 
                    string pass, 
                    bool Addsupply, 
                    bool UpdSupply, 
                    bool Addoutt, 
                    bool updOut, 
                    bool PrintSupply, 
                    bool PrintOut, 
                    bool PrintQuntity, 
                    bool UpdSupp1, 
                    bool UpdOut1, 
                    bool userAdd, 
                    bool Active, 
                    bool Cate, 
                    bool type1, 
                    bool account, 
                    bool Monay, 
                    bool Place, 
                    int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpatePassword", ReplyAction="http://tempuri.org/Iservice/UpatePasswordResponse")]
        int UpatePassword(int idUser, string Pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpatePassword", ReplyAction="http://tempuri.org/Iservice/UpatePasswordResponse")]
        System.Threading.Tasks.Task<int> UpatePasswordAsync(int idUser, string Pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdUsers", ReplyAction="http://tempuri.org/Iservice/UpdUsersResponse")]
        int UpdUsers(
                    int IDUser, 
                    string name, 
                    string user, 
                    string pass, 
                    bool Addsupply, 
                    bool UpdSupply, 
                    bool Addoutt, 
                    bool updOut, 
                    bool PrintSupply, 
                    bool PrintOut, 
                    bool PrintQuntity, 
                    bool UpdSupp1, 
                    bool UpdOut1, 
                    bool userAdd, 
                    bool Active, 
                    bool Cate, 
                    bool type1, 
                    bool account, 
                    bool Monay, 
                    bool Place);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdUsers", ReplyAction="http://tempuri.org/Iservice/UpdUsersResponse")]
        System.Threading.Tasks.Task<int> UpdUsersAsync(
                    int IDUser, 
                    string name, 
                    string user, 
                    string pass, 
                    bool Addsupply, 
                    bool UpdSupply, 
                    bool Addoutt, 
                    bool updOut, 
                    bool PrintSupply, 
                    bool PrintOut, 
                    bool PrintQuntity, 
                    bool UpdSupp1, 
                    bool UpdOut1, 
                    bool userAdd, 
                    bool Active, 
                    bool Cate, 
                    bool type1, 
                    bool account, 
                    bool Monay, 
                    bool Place);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllUser", ReplyAction="http://tempuri.org/Iservice/GetAllUserResponse")]
        System.IO.MemoryStream GetAllUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllUser", ReplyAction="http://tempuri.org/Iservice/GetAllUserResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUser", ReplyAction="http://tempuri.org/Iservice/GetUserResponse")]
        System.IO.MemoryStream GetUser(int IdUs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUser", ReplyAction="http://tempuri.org/Iservice/GetUserResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetUserAsync(int IdUs);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IserviceChannel : StoreMaga0101.ServiceReference1.Iservice, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IserviceClient : System.ServiceModel.ClientBase<StoreMaga0101.ServiceReference1.Iservice>, StoreMaga0101.ServiceReference1.Iservice {
        
        public IserviceClient() {
        }
        
        public IserviceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IserviceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IserviceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IserviceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SENDUSERTOSERVER(int falg, string name) {
            base.Channel.SENDUSERTOSERVER(falg, name);
        }
        
        public System.Threading.Tasks.Task SENDUSERTOSERVERAsync(int falg, string name) {
            return base.Channel.SENDUSERTOSERVERAsync(falg, name);
        }
        
        public int LoginUser(string User, string Pass) {
            return base.Channel.LoginUser(User, Pass);
        }
        
        public System.Threading.Tasks.Task<int> LoginUserAsync(string User, string Pass) {
            return base.Channel.LoginUserAsync(User, Pass);
        }
        
        public int AddNewUser(
                    string name, 
                    string user, 
                    string pass, 
                    bool Addsupply, 
                    bool UpdSupply, 
                    bool Addoutt, 
                    bool updOut, 
                    bool PrintSupply, 
                    bool PrintOut, 
                    bool PrintQuntity, 
                    bool UpdSupp1, 
                    bool UpdOut1, 
                    bool userAdd, 
                    bool Active, 
                    bool Cate, 
                    bool type1, 
                    bool account, 
                    bool Monay, 
                    bool Place, 
                    int UserID) {
            return base.Channel.AddNewUser(name, user, pass, Addsupply, UpdSupply, Addoutt, updOut, PrintSupply, PrintOut, PrintQuntity, UpdSupp1, UpdOut1, userAdd, Active, Cate, type1, account, Monay, Place, UserID);
        }
        
        public System.Threading.Tasks.Task<int> AddNewUserAsync(
                    string name, 
                    string user, 
                    string pass, 
                    bool Addsupply, 
                    bool UpdSupply, 
                    bool Addoutt, 
                    bool updOut, 
                    bool PrintSupply, 
                    bool PrintOut, 
                    bool PrintQuntity, 
                    bool UpdSupp1, 
                    bool UpdOut1, 
                    bool userAdd, 
                    bool Active, 
                    bool Cate, 
                    bool type1, 
                    bool account, 
                    bool Monay, 
                    bool Place, 
                    int UserID) {
            return base.Channel.AddNewUserAsync(name, user, pass, Addsupply, UpdSupply, Addoutt, updOut, PrintSupply, PrintOut, PrintQuntity, UpdSupp1, UpdOut1, userAdd, Active, Cate, type1, account, Monay, Place, UserID);
        }
        
        public int UpatePassword(int idUser, string Pass) {
            return base.Channel.UpatePassword(idUser, Pass);
        }
        
        public System.Threading.Tasks.Task<int> UpatePasswordAsync(int idUser, string Pass) {
            return base.Channel.UpatePasswordAsync(idUser, Pass);
        }
        
        public int UpdUsers(
                    int IDUser, 
                    string name, 
                    string user, 
                    string pass, 
                    bool Addsupply, 
                    bool UpdSupply, 
                    bool Addoutt, 
                    bool updOut, 
                    bool PrintSupply, 
                    bool PrintOut, 
                    bool PrintQuntity, 
                    bool UpdSupp1, 
                    bool UpdOut1, 
                    bool userAdd, 
                    bool Active, 
                    bool Cate, 
                    bool type1, 
                    bool account, 
                    bool Monay, 
                    bool Place) {
            return base.Channel.UpdUsers(IDUser, name, user, pass, Addsupply, UpdSupply, Addoutt, updOut, PrintSupply, PrintOut, PrintQuntity, UpdSupp1, UpdOut1, userAdd, Active, Cate, type1, account, Monay, Place);
        }
        
        public System.Threading.Tasks.Task<int> UpdUsersAsync(
                    int IDUser, 
                    string name, 
                    string user, 
                    string pass, 
                    bool Addsupply, 
                    bool UpdSupply, 
                    bool Addoutt, 
                    bool updOut, 
                    bool PrintSupply, 
                    bool PrintOut, 
                    bool PrintQuntity, 
                    bool UpdSupp1, 
                    bool UpdOut1, 
                    bool userAdd, 
                    bool Active, 
                    bool Cate, 
                    bool type1, 
                    bool account, 
                    bool Monay, 
                    bool Place) {
            return base.Channel.UpdUsersAsync(IDUser, name, user, pass, Addsupply, UpdSupply, Addoutt, updOut, PrintSupply, PrintOut, PrintQuntity, UpdSupp1, UpdOut1, userAdd, Active, Cate, type1, account, Monay, Place);
        }
        
        public System.IO.MemoryStream GetAllUser() {
            return base.Channel.GetAllUser();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllUserAsync() {
            return base.Channel.GetAllUserAsync();
        }
        
        public System.IO.MemoryStream GetUser(int IdUs) {
            return base.Channel.GetUser(IdUs);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetUserAsync(int IdUs) {
            return base.Channel.GetUserAsync(IdUs);
        }
    }
}
