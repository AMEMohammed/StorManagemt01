//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Supplly.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.Iservice")]
    public interface Iservice {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/chackPlace", ReplyAction="http://tempuri.org/Iservice/chackPlaceResponse")]
        System.IO.MemoryStream chackPlace(int IDplace);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/chackPlace", ReplyAction="http://tempuri.org/Iservice/chackPlaceResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> chackPlaceAsync(int IDplace);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GETCurrencyBYName", ReplyAction="http://tempuri.org/Iservice/GETCurrencyBYNameResponse")]
        System.IO.MemoryStream GETCurrencyBYName(string NameCurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GETCurrencyBYName", ReplyAction="http://tempuri.org/Iservice/GETCurrencyBYNameResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GETCurrencyBYNameAsync(string NameCurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewCurrency", ReplyAction="http://tempuri.org/Iservice/AddNewCurrencyResponse")]
        int AddNewCurrency(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewCurrency", ReplyAction="http://tempuri.org/Iservice/AddNewCurrencyResponse")]
        System.Threading.Tasks.Task<int> AddNewCurrencyAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateCurrency", ReplyAction="http://tempuri.org/Iservice/UpdateCurrencyResponse")]
        int UpdateCurrency(int id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateCurrency", ReplyAction="http://tempuri.org/Iservice/UpdateCurrencyResponse")]
        System.Threading.Tasks.Task<int> UpdateCurrencyAsync(int id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteCurrency", ReplyAction="http://tempuri.org/Iservice/DeleteCurrencyResponse")]
        int DeleteCurrency(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteCurrency", ReplyAction="http://tempuri.org/Iservice/DeleteCurrencyResponse")]
        System.Threading.Tasks.Task<int> DeleteCurrencyAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/chackCurncy", ReplyAction="http://tempuri.org/Iservice/chackCurncyResponse")]
        System.IO.MemoryStream chackCurncy(int IDcur);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/chackCurncy", ReplyAction="http://tempuri.org/Iservice/chackCurncyResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> chackCurncyAsync(int IDcur);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewGroup", ReplyAction="http://tempuri.org/Iservice/AddNewGroupResponse")]
        int AddNewGroup(int GroupSourceID, string GroupName, string GroupDescription, int UserID, System.DateTime EnterTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewGroup", ReplyAction="http://tempuri.org/Iservice/AddNewGroupResponse")]
        System.Threading.Tasks.Task<int> AddNewGroupAsync(int GroupSourceID, string GroupName, string GroupDescription, int UserID, System.DateTime EnterTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetOneGroup", ReplyAction="http://tempuri.org/Iservice/GetOneGroupResponse")]
        System.IO.MemoryStream GetOneGroup(int IDGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetOneGroup", ReplyAction="http://tempuri.org/Iservice/GetOneGroupResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetOneGroupAsync(int IDGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllGroup", ReplyAction="http://tempuri.org/Iservice/GetAllGroupResponse")]
        System.IO.MemoryStream GetAllGroup();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllGroup", ReplyAction="http://tempuri.org/Iservice/GetAllGroupResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllGroupAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetGroupByName", ReplyAction="http://tempuri.org/Iservice/GetGroupByNameResponse")]
        System.IO.MemoryStream GetGroupByName(string NAME);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetGroupByName", ReplyAction="http://tempuri.org/Iservice/GetGroupByNameResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetGroupByNameAsync(string NAME);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteGroup", ReplyAction="http://tempuri.org/Iservice/DeleteGroupResponse")]
        System.IO.MemoryStream DeleteGroup(int IDGROUP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteGroup", ReplyAction="http://tempuri.org/Iservice/DeleteGroupResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> DeleteGroupAsync(int IDGROUP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/CheckGroupItems", ReplyAction="http://tempuri.org/Iservice/CheckGroupItemsResponse")]
        bool CheckGroupItems(int IDGROUP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/CheckGroupItems", ReplyAction="http://tempuri.org/Iservice/CheckGroupItemsResponse")]
        System.Threading.Tasks.Task<bool> CheckGroupItemsAsync(int IDGROUP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetSourecGroup", ReplyAction="http://tempuri.org/Iservice/GetSourecGroupResponse")]
        System.IO.MemoryStream GetSourecGroup();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetSourecGroup", ReplyAction="http://tempuri.org/Iservice/GetSourecGroupResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetSourecGroupAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetMaxIDGroup", ReplyAction="http://tempuri.org/Iservice/GetMaxIDGroupResponse")]
        int GetMaxIDGroup();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetMaxIDGroup", ReplyAction="http://tempuri.org/Iservice/GetMaxIDGroupResponse")]
        System.Threading.Tasks.Task<int> GetMaxIDGroupAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateGroup", ReplyAction="http://tempuri.org/Iservice/UpdateGroupResponse")]
        int UpdateGroup(int ID, int GroupSourceID, string GroupName, string GroupDescription, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateGroup", ReplyAction="http://tempuri.org/Iservice/UpdateGroupResponse")]
        System.Threading.Tasks.Task<int> UpdateGroupAsync(int ID, int GroupSourceID, string GroupName, string GroupDescription, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllAccountSubNoInGroup", ReplyAction="http://tempuri.org/Iservice/GetAllAccountSubNoInGroupResponse")]
        System.IO.MemoryStream GetAllAccountSubNoInGroup(int GroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllAccountSubNoInGroup", ReplyAction="http://tempuri.org/Iservice/GetAllAccountSubNoInGroupResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllAccountSubNoInGroupAsync(int GroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllAccountSubInGroup", ReplyAction="http://tempuri.org/Iservice/GetAllAccountSubInGroupResponse")]
        System.IO.MemoryStream GetAllAccountSubInGroup(int GroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllAccountSubInGroup", ReplyAction="http://tempuri.org/Iservice/GetAllAccountSubInGroupResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllAccountSubInGroupAsync(int GroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteItemsONGroupDetalis", ReplyAction="http://tempuri.org/Iservice/DeleteItemsONGroupDetalisResponse")]
        int DeleteItemsONGroupDetalis(int IDGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteItemsONGroupDetalis", ReplyAction="http://tempuri.org/Iservice/DeleteItemsONGroupDetalisResponse")]
        System.Threading.Tasks.Task<int> DeleteItemsONGroupDetalisAsync(int IDGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddItemsONGroupDetalis", ReplyAction="http://tempuri.org/Iservice/AddItemsONGroupDetalisResponse")]
        int AddItemsONGroupDetalis(int IDGroup, int IDItems, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddItemsONGroupDetalis", ReplyAction="http://tempuri.org/Iservice/AddItemsONGroupDetalisResponse")]
        System.Threading.Tasks.Task<int> AddItemsONGroupDetalisAsync(int IDGroup, int IDItems, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddConnectionAccountwithPlace", ReplyAction="http://tempuri.org/Iservice/AddConnectionAccountwithPlaceResponse")]
        int AddConnectionAccountwithPlace(int palce, int idMadeen, int idDaan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddConnectionAccountwithPlace", ReplyAction="http://tempuri.org/Iservice/AddConnectionAccountwithPlaceResponse")]
        System.Threading.Tasks.Task<int> AddConnectionAccountwithPlaceAsync(int palce, int idMadeen, int idDaan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateConnectionAccountwithPlace", ReplyAction="http://tempuri.org/Iservice/UpdateConnectionAccountwithPlaceResponse")]
        int UpdateConnectionAccountwithPlace(int ID, int palce, int idMadeen, int idDaan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateConnectionAccountwithPlace", ReplyAction="http://tempuri.org/Iservice/UpdateConnectionAccountwithPlaceResponse")]
        System.Threading.Tasks.Task<int> UpdateConnectionAccountwithPlaceAsync(int ID, int palce, int idMadeen, int idDaan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteConnectionAccountwithPlace", ReplyAction="http://tempuri.org/Iservice/DeleteConnectionAccountwithPlaceResponse")]
        int DeleteConnectionAccountwithPlace(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteConnectionAccountwithPlace", ReplyAction="http://tempuri.org/Iservice/DeleteConnectionAccountwithPlaceResponse")]
        System.Threading.Tasks.Task<int> DeleteConnectionAccountwithPlaceAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetConnectionAccountwithPlace", ReplyAction="http://tempuri.org/Iservice/GetConnectionAccountwithPlaceResponse")]
        System.IO.MemoryStream GetConnectionAccountwithPlace();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetConnectionAccountwithPlace", ReplyAction="http://tempuri.org/Iservice/GetConnectionAccountwithPlaceResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetConnectionAccountwithPlaceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllCategoryARWithAccount", ReplyAction="http://tempuri.org/Iservice/GetAllCategoryARWithAccountResponse")]
        System.IO.MemoryStream GetAllCategoryARWithAccount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllCategoryARWithAccount", ReplyAction="http://tempuri.org/Iservice/GetAllCategoryARWithAccountResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllCategoryARWithAccountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetGroupsCate", ReplyAction="http://tempuri.org/Iservice/GetGroupsCateResponse")]
        System.IO.MemoryStream GetGroupsCate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetGroupsCate", ReplyAction="http://tempuri.org/Iservice/GetGroupsCateResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetGroupsCateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllUserinReprt", ReplyAction="http://tempuri.org/Iservice/GetAllUserinReprtResponse")]
        System.IO.MemoryStream GetAllUserinReprt();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllUserinReprt", ReplyAction="http://tempuri.org/Iservice/GetAllUserinReprtResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllUserinReprtAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllUserAR", ReplyAction="http://tempuri.org/Iservice/GetAllUserARResponse")]
        System.IO.MemoryStream GetAllUserAR();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllUserAR", ReplyAction="http://tempuri.org/Iservice/GetAllUserARResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllUserARAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintRequstRPT", ReplyAction="http://tempuri.org/Iservice/PrintRequstRPTResponse")]
        System.IO.MemoryStream PrintRequstRPT(System.DateTime d1, System.DateTime d2, int IDCate, int IDType, int IDCurrn, string txt, int iduser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintRequstRPT", ReplyAction="http://tempuri.org/Iservice/PrintRequstRPTResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> PrintRequstRPTAsync(System.DateTime d1, System.DateTime d2, int IDCate, int IDType, int IDCurrn, string txt, int iduser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintRequstRPTAll", ReplyAction="http://tempuri.org/Iservice/PrintRequstRPTAllResponse")]
        System.IO.MemoryStream PrintRequstRPTAll(System.DateTime d1, System.DateTime d2, string txt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintRequstRPTAll", ReplyAction="http://tempuri.org/Iservice/PrintRequstRPTAllResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> PrintRequstRPTAllAsync(System.DateTime d1, System.DateTime d2, string txt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintRequstRPTIDcat", ReplyAction="http://tempuri.org/Iservice/PrintRequstRPTIDcatResponse")]
        System.IO.MemoryStream PrintRequstRPTIDcat(System.DateTime d1, System.DateTime d2, string txt, int IDCate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintRequstRPTIDcat", ReplyAction="http://tempuri.org/Iservice/PrintRequstRPTIDcatResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> PrintRequstRPTIDcatAsync(System.DateTime d1, System.DateTime d2, string txt, int IDCate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintOutAllwithDate", ReplyAction="http://tempuri.org/Iservice/PrintOutAllwithDateResponse")]
        System.IO.MemoryStream PrintOutAllwithDate(int idca, int idtyp, int idpalce, int idcurrnt, string name, System.DateTime d1, System.DateTime d2, int iduser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintOutAllwithDate", ReplyAction="http://tempuri.org/Iservice/PrintOutAllwithDateResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> PrintOutAllwithDateAsync(int idca, int idtyp, int idpalce, int idcurrnt, string name, System.DateTime d1, System.DateTime d2, int iduser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintOutAllwithDateAll", ReplyAction="http://tempuri.org/Iservice/PrintOutAllwithDateAllResponse")]
        System.IO.MemoryStream PrintOutAllwithDateAll(string name, System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintOutAllwithDateAll", ReplyAction="http://tempuri.org/Iservice/PrintOutAllwithDateAllResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> PrintOutAllwithDateAllAsync(string name, System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintOutAllwithDateWithIDca", ReplyAction="http://tempuri.org/Iservice/PrintOutAllwithDateWithIDcaResponse")]
        System.IO.MemoryStream PrintOutAllwithDateWithIDca(string name, System.DateTime d1, System.DateTime d2, int idca);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintOutAllwithDateWithIDca", ReplyAction="http://tempuri.org/Iservice/PrintOutAllwithDateWithIDcaResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> PrintOutAllwithDateWithIDcaAsync(string name, System.DateTime d1, System.DateTime d2, int idca);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintOutAllwithDateWithIDcaPLAC", ReplyAction="http://tempuri.org/Iservice/PrintOutAllwithDateWithIDcaPLACResponse")]
        System.IO.MemoryStream PrintOutAllwithDateWithIDcaPLAC(string name, System.DateTime d1, System.DateTime d2, int idca, int idpalce);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintOutAllwithDateWithIDcaPLAC", ReplyAction="http://tempuri.org/Iservice/PrintOutAllwithDateWithIDcaPLACResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> PrintOutAllwithDateWithIDcaPLACAsync(string name, System.DateTime d1, System.DateTime d2, int idca, int idpalce);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintOutAllwithDateWithPLAC", ReplyAction="http://tempuri.org/Iservice/PrintOutAllwithDateWithPLACResponse")]
        System.IO.MemoryStream PrintOutAllwithDateWithPLAC(string name, System.DateTime d1, System.DateTime d2, int idpalce);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintOutAllwithDateWithPLAC", ReplyAction="http://tempuri.org/Iservice/PrintOutAllwithDateWithPLACResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> PrintOutAllwithDateWithPLACAsync(string name, System.DateTime d1, System.DateTime d2, int idpalce);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintAccountQuntity", ReplyAction="http://tempuri.org/Iservice/PrintAccountQuntityResponse")]
        System.IO.MemoryStream PrintAccountQuntity(int idcat, int idtyp, int idcu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintAccountQuntity", ReplyAction="http://tempuri.org/Iservice/PrintAccountQuntityResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> PrintAccountQuntityAsync(int idcat, int idtyp, int idcu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintAccountQuntityIDac", ReplyAction="http://tempuri.org/Iservice/PrintAccountQuntityIDacResponse")]
        System.IO.MemoryStream PrintAccountQuntityIDac(int idcu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintAccountQuntityIDac", ReplyAction="http://tempuri.org/Iservice/PrintAccountQuntityIDacResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> PrintAccountQuntityIDacAsync(int idcu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintAccountQuntityWithGroup", ReplyAction="http://tempuri.org/Iservice/PrintAccountQuntityWithGroupResponse")]
        System.IO.MemoryStream PrintAccountQuntityWithGroup(int IDGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintAccountQuntityWithGroup", ReplyAction="http://tempuri.org/Iservice/PrintAccountQuntityWithGroupResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> PrintAccountQuntityWithGroupAsync(int IDGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintAccountQuntityAll", ReplyAction="http://tempuri.org/Iservice/PrintAccountQuntityAllResponse")]
        System.IO.MemoryStream PrintAccountQuntityAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintAccountQuntityAll", ReplyAction="http://tempuri.org/Iservice/PrintAccountQuntityAllResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> PrintAccountQuntityAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUpdateSupplyByIDSupply", ReplyAction="http://tempuri.org/Iservice/GetUpdateSupplyByIDSupplyResponse")]
        System.IO.MemoryStream GetUpdateSupplyByIDSupply(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUpdateSupplyByIDSupply", ReplyAction="http://tempuri.org/Iservice/GetUpdateSupplyByIDSupplyResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetUpdateSupplyByIDSupplyAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUpdateSupplyByDate", ReplyAction="http://tempuri.org/Iservice/GetUpdateSupplyByDateResponse")]
        System.IO.MemoryStream GetUpdateSupplyByDate(System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUpdateSupplyByDate", ReplyAction="http://tempuri.org/Iservice/GetUpdateSupplyByDateResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetUpdateSupplyByDateAsync(System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUpdateSupplyByDateUpdateWithDate", ReplyAction="http://tempuri.org/Iservice/GetUpdateSupplyByDateUpdateWithDateResponse")]
        System.IO.MemoryStream GetUpdateSupplyByDateUpdateWithDate(System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUpdateSupplyByDateUpdateWithDate", ReplyAction="http://tempuri.org/Iservice/GetUpdateSupplyByDateUpdateWithDateResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetUpdateSupplyByDateUpdateWithDateAsync(System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUpdateSupplyByDateDeleteWithDate", ReplyAction="http://tempuri.org/Iservice/GetUpdateSupplyByDateDeleteWithDateResponse")]
        System.IO.MemoryStream GetUpdateSupplyByDateDeleteWithDate(System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUpdateSupplyByDateDeleteWithDate", ReplyAction="http://tempuri.org/Iservice/GetUpdateSupplyByDateDeleteWithDateResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetUpdateSupplyByDateDeleteWithDateAsync(System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUpdtOutByIDOut", ReplyAction="http://tempuri.org/Iservice/GetUpdtOutByIDOutResponse")]
        System.IO.MemoryStream GetUpdtOutByIDOut(int idOUt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUpdtOutByIDOut", ReplyAction="http://tempuri.org/Iservice/GetUpdtOutByIDOutResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetUpdtOutByIDOutAsync(int idOUt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUpdOutByDate", ReplyAction="http://tempuri.org/Iservice/GetUpdOutByDateResponse")]
        System.IO.MemoryStream GetUpdOutByDate(System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUpdOutByDate", ReplyAction="http://tempuri.org/Iservice/GetUpdOutByDateResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetUpdOutByDateAsync(System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUpdOutByDateUpdtewithdate", ReplyAction="http://tempuri.org/Iservice/GetUpdOutByDateUpdtewithdateResponse")]
        System.IO.MemoryStream GetUpdOutByDateUpdtewithdate(System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUpdOutByDateUpdtewithdate", ReplyAction="http://tempuri.org/Iservice/GetUpdOutByDateUpdtewithdateResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetUpdOutByDateUpdtewithdateAsync(System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUpdOutByDateDetle2tewithdate", ReplyAction="http://tempuri.org/Iservice/GetUpdOutByDateDetle2tewithdateResponse")]
        System.IO.MemoryStream GetUpdOutByDateDetle2tewithdate(System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUpdOutByDateDetle2tewithdate", ReplyAction="http://tempuri.org/Iservice/GetUpdOutByDateDetle2tewithdateResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetUpdOutByDateDetle2tewithdateAsync(System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewSession", ReplyAction="http://tempuri.org/Iservice/AddNewSessionResponse")]
        int AddNewSession(System.DateTime strat, System.DateTime end, string OSversion, string NameMachin, string UserWindows, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewSession", ReplyAction="http://tempuri.org/Iservice/AddNewSessionResponse")]
        System.Threading.Tasks.Task<int> AddNewSessionAsync(System.DateTime strat, System.DateTime end, string OSversion, string NameMachin, string UserWindows, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateENDtimeSession", ReplyAction="http://tempuri.org/Iservice/UpdateENDtimeSessionResponse")]
        int UpdateENDtimeSession(int IDSession, System.DateTime End);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateENDtimeSession", ReplyAction="http://tempuri.org/Iservice/UpdateENDtimeSessionResponse")]
        System.Threading.Tasks.Task<int> UpdateENDtimeSessionAsync(int IDSession, System.DateTime End);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GETMAXIDSession", ReplyAction="http://tempuri.org/Iservice/GETMAXIDSessionResponse")]
        int GETMAXIDSession();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GETMAXIDSession", ReplyAction="http://tempuri.org/Iservice/GETMAXIDSessionResponse")]
        System.Threading.Tasks.Task<int> GETMAXIDSessionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUserNameBYIdUser", ReplyAction="http://tempuri.org/Iservice/GetUserNameBYIdUserResponse")]
        string GetUserNameBYIdUser(int IdUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUserNameBYIdUser", ReplyAction="http://tempuri.org/Iservice/GetUserNameBYIdUserResponse")]
        System.Threading.Tasks.Task<string> GetUserNameBYIdUserAsync(int IdUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetRequstOutSngle", ReplyAction="http://tempuri.org/Iservice/GetRequstOutSngleResponse")]
        System.IO.MemoryStream GetRequstOutSngle(int IDOutRequst);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetRequstOutSngle", ReplyAction="http://tempuri.org/Iservice/GetRequstOutSngleResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetRequstOutSngleAsync(int IDOutRequst);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewUpdOut", ReplyAction="http://tempuri.org/Iservice/AddNewUpdOutResponse")]
        int AddNewUpdOut(int IDOut, int IdCate, int IdType, int IdPlace, int Quntity, string NameOUt, string NameSend, int Price, int IdCurrent, string TxtReson, System.DateTime DateUpdate, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewUpdOut", ReplyAction="http://tempuri.org/Iservice/AddNewUpdOutResponse")]
        System.Threading.Tasks.Task<int> AddNewUpdOutAsync(int IDOut, int IdCate, int IdType, int IdPlace, int Quntity, string NameOUt, string NameSend, int Price, int IdCurrent, string TxtReson, System.DateTime DateUpdate, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/CheckAccountIsHere", ReplyAction="http://tempuri.org/Iservice/CheckAccountIsHereResponse")]
        int CheckAccountIsHere(int IDCategory, int IDType, int price, int idcurrnt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/CheckAccountIsHere", ReplyAction="http://tempuri.org/Iservice/CheckAccountIsHereResponse")]
        System.Threading.Tasks.Task<int> CheckAccountIsHereAsync(int IDCategory, int IDType, int price, int idcurrnt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteRqustOut", ReplyAction="http://tempuri.org/Iservice/DeleteRqustOutResponse")]
        int DeleteRqustOut(int IdRequstOut, int IdUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteRqustOut", ReplyAction="http://tempuri.org/Iservice/DeleteRqustOutResponse")]
        System.Threading.Tasks.Task<int> DeleteRqustOutAsync(int IdRequstOut, int IdUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateRequstOut", ReplyAction="http://tempuri.org/Iservice/UpdateRequstOutResponse")]
        int UpdateRequstOut(int IDOut, int IdPlace, string NameOut, string NameSend, string Reson, System.DateTime d1, int UserId, int debt, int crd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateRequstOut", ReplyAction="http://tempuri.org/Iservice/UpdateRequstOutResponse")]
        System.Threading.Tasks.Task<int> UpdateRequstOutAsync(int IDOut, int IdPlace, string NameOut, string NameSend, string Reson, System.DateTime d1, int UserId, int debt, int crd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetMAxIDOUt", ReplyAction="http://tempuri.org/Iservice/GetMAxIDOUtResponse")]
        int GetMAxIDOUt();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetMAxIDOUt", ReplyAction="http://tempuri.org/Iservice/GetMAxIDOUtResponse")]
        System.Threading.Tasks.Task<int> GetMAxIDOUtAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetALLAcountNm", ReplyAction="http://tempuri.org/Iservice/GetALLAcountNmResponse")]
        System.IO.MemoryStream GetALLAcountNm();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetALLAcountNm", ReplyAction="http://tempuri.org/Iservice/GetALLAcountNmResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetALLAcountNmAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/CheckAccontTotalInOut", ReplyAction="http://tempuri.org/Iservice/CheckAccontTotalInOutResponse")]
        bool CheckAccontTotalInOut(int IDcode, int IDCurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/CheckAccontTotalInOut", ReplyAction="http://tempuri.org/Iservice/CheckAccontTotalInOutResponse")]
        System.Threading.Tasks.Task<bool> CheckAccontTotalInOutAsync(int IDcode, int IDCurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewAccountTotalInOut", ReplyAction="http://tempuri.org/Iservice/AddNewAccountTotalInOutResponse")]
        int AddNewAccountTotalInOut(int IDCOde, int Mony, int idCurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewAccountTotalInOut", ReplyAction="http://tempuri.org/Iservice/AddNewAccountTotalInOutResponse")]
        System.Threading.Tasks.Task<int> AddNewAccountTotalInOutAsync(int IDCOde, int Mony, int idCurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetBalanceInOut", ReplyAction="http://tempuri.org/Iservice/GetBalanceInOutResponse")]
        int GetBalanceInOut(int Idcode, int IDCur);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetBalanceInOut", ReplyAction="http://tempuri.org/Iservice/GetBalanceInOutResponse")]
        System.Threading.Tasks.Task<int> GetBalanceInOutAsync(int Idcode, int IDCur);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateAccountTotalInOut", ReplyAction="http://tempuri.org/Iservice/UpdateAccountTotalInOutResponse")]
        int UpdateAccountTotalInOut(int IDCOde, int Mony, int idCurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateAccountTotalInOut", ReplyAction="http://tempuri.org/Iservice/UpdateAccountTotalInOutResponse")]
        System.Threading.Tasks.Task<int> UpdateAccountTotalInOutAsync(int IDCOde, int Mony, int idCurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewAccountDetalisInOut", ReplyAction="http://tempuri.org/Iservice/AddNewAccountDetalisInOutResponse")]
        int AddNewAccountDetalisInOut(int idcode, int monay, int idsupply, int idout, string Detalis, System.DateTime d1, int userid, int idcurrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewAccountDetalisInOut", ReplyAction="http://tempuri.org/Iservice/AddNewAccountDetalisInOutResponse")]
        System.Threading.Tasks.Task<int> AddNewAccountDetalisInOutAsync(int idcode, int monay, int idsupply, int idout, string Detalis, System.DateTime d1, int userid, int idcurrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteSuuplyFrmAccountDitalis", ReplyAction="http://tempuri.org/Iservice/DeleteSuuplyFrmAccountDitalisResponse")]
        int DeleteSuuplyFrmAccountDitalis(int idSupply);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteSuuplyFrmAccountDitalis", ReplyAction="http://tempuri.org/Iservice/DeleteSuuplyFrmAccountDitalisResponse")]
        System.Threading.Tasks.Task<int> DeleteSuuplyFrmAccountDitalisAsync(int idSupply);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteSuuplyFrmAccountDitalis2", ReplyAction="http://tempuri.org/Iservice/DeleteSuuplyFrmAccountDitalis2Response")]
        int DeleteSuuplyFrmAccountDitalis2(int idout);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteSuuplyFrmAccountDitalis2", ReplyAction="http://tempuri.org/Iservice/DeleteSuuplyFrmAccountDitalis2Response")]
        System.Threading.Tasks.Task<int> DeleteSuuplyFrmAccountDitalis2Async(int idout);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetIDAccountPalce", ReplyAction="http://tempuri.org/Iservice/GetIDAccountPalceResponse")]
        int GetIDAccountPalce(int IDACcount, int idplace);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetIDAccountPalce", ReplyAction="http://tempuri.org/Iservice/GetIDAccountPalceResponse")]
        System.Threading.Tasks.Task<int> GetIDAccountPalceAsync(int IDACcount, int idplace);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetIdUserINSupply", ReplyAction="http://tempuri.org/Iservice/GetIdUserINSupplyResponse")]
        int GetIdUserINSupply(string NameUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetIdUserINSupply", ReplyAction="http://tempuri.org/Iservice/GetIdUserINSupplyResponse")]
        System.Threading.Tasks.Task<int> GetIdUserINSupplyAsync(string NameUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUserNameBYIdUserINSupply", ReplyAction="http://tempuri.org/Iservice/GetUserNameBYIdUserINSupplyResponse")]
        string GetUserNameBYIdUserINSupply(int IdUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUserNameBYIdUserINSupply", ReplyAction="http://tempuri.org/Iservice/GetUserNameBYIdUserINSupplyResponse")]
        System.Threading.Tasks.Task<string> GetUserNameBYIdUserINSupplyAsync(int IdUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintRequstSupply", ReplyAction="http://tempuri.org/Iservice/PrintRequstSupplyResponse")]
        System.IO.MemoryStream PrintRequstSupply(int IDreqSup, int UserId, int user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintRequstSupply", ReplyAction="http://tempuri.org/Iservice/PrintRequstSupplyResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> PrintRequstSupplyAsync(int IDreqSup, int UserId, int user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/printrequstOutExit1", ReplyAction="http://tempuri.org/Iservice/printrequstOutExit1Response")]
        System.IO.MemoryStream printrequstOutExit1(int IDreqSup, int UserId, int user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/printrequstOutExit1", ReplyAction="http://tempuri.org/Iservice/printrequstOutExit1Response")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> printrequstOutExit1Async(int IDreqSup, int UserId, int user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAccountLinkCateInSupply", ReplyAction="http://tempuri.org/Iservice/GetAccountLinkCateInSupplyResponse")]
        int GetAccountLinkCateInSupply(int IDcate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAccountLinkCateInSupply", ReplyAction="http://tempuri.org/Iservice/GetAccountLinkCateInSupplyResponse")]
        System.Threading.Tasks.Task<int> GetAccountLinkCateInSupplyAsync(int IDcate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewRequsetSupply", ReplyAction="http://tempuri.org/Iservice/AddNewRequsetSupplyResponse")]
        int AddNewRequsetSupply(int IDCategory, int IDType, int Quntity, int Price, int idcurrnt, string NameSupply, string DescSupply, System.DateTime DateSupply, int IDuser, int chek, int debi, int cred);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewRequsetSupply", ReplyAction="http://tempuri.org/Iservice/AddNewRequsetSupplyResponse")]
        System.Threading.Tasks.Task<int> AddNewRequsetSupplyAsync(int IDCategory, int IDType, int Quntity, int Price, int idcurrnt, string NameSupply, string DescSupply, System.DateTime DateSupply, int IDuser, int chek, int debi, int cred);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetMaxIdSupply", ReplyAction="http://tempuri.org/Iservice/GetMaxIdSupplyResponse")]
        int GetMaxIdSupply();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetMaxIdSupply", ReplyAction="http://tempuri.org/Iservice/GetMaxIdSupplyResponse")]
        System.Threading.Tasks.Task<int> GetMaxIdSupplyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/SearchINRequsetSupplyDate", ReplyAction="http://tempuri.org/Iservice/SearchINRequsetSupplyDateResponse")]
        System.IO.MemoryStream SearchINRequsetSupplyDate(System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/SearchINRequsetSupplyDate", ReplyAction="http://tempuri.org/Iservice/SearchINRequsetSupplyDateResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> SearchINRequsetSupplyDateAsync(System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllCreditorINSuplly", ReplyAction="http://tempuri.org/Iservice/GetAllCreditorINSupllyResponse")]
        System.IO.MemoryStream GetAllCreditorINSuplly();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllCreditorINSuplly", ReplyAction="http://tempuri.org/Iservice/GetAllCreditorINSupllyResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllCreditorINSupllyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/CheckAccountIsHereInSuplly", ReplyAction="http://tempuri.org/Iservice/CheckAccountIsHereInSupllyResponse")]
        int CheckAccountIsHereInSuplly(int IDCategory, int IDType, int price, int idcurrnt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/CheckAccountIsHereInSuplly", ReplyAction="http://tempuri.org/Iservice/CheckAccountIsHereInSupllyResponse")]
        System.Threading.Tasks.Task<int> CheckAccountIsHereInSupllyAsync(int IDCategory, int IDType, int price, int idcurrnt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateQuntityAccountInSuplly", ReplyAction="http://tempuri.org/Iservice/UpdateQuntityAccountInSupllyResponse")]
        int UpdateQuntityAccountInSuplly(int IDAccount, int newquntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateQuntityAccountInSuplly", ReplyAction="http://tempuri.org/Iservice/UpdateQuntityAccountInSupllyResponse")]
        System.Threading.Tasks.Task<int> UpdateQuntityAccountInSupllyAsync(int IDAccount, int newquntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewAccount", ReplyAction="http://tempuri.org/Iservice/AddNewAccountResponse")]
        int AddNewAccount(int IDCategory, int IDType, int Quntity, int Price, int idcurrnt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewAccount", ReplyAction="http://tempuri.org/Iservice/AddNewAccountResponse")]
        System.Threading.Tasks.Task<int> AddNewAccountAsync(int IDCategory, int IDType, int Quntity, int Price, int idcurrnt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetMaxCheckSupply", ReplyAction="http://tempuri.org/Iservice/GetMaxCheckSupplyResponse")]
        int GetMaxCheckSupply();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetMaxCheckSupply", ReplyAction="http://tempuri.org/Iservice/GetMaxCheckSupplyResponse")]
        System.Threading.Tasks.Task<int> GetMaxCheckSupplyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllCategoryAR", ReplyAction="http://tempuri.org/Iservice/GetAllCategoryARResponse")]
        System.IO.MemoryStream GetAllCategoryAR();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllCategoryAR", ReplyAction="http://tempuri.org/Iservice/GetAllCategoryARResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllCategoryARAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllTypeQuntity", ReplyAction="http://tempuri.org/Iservice/GetAllTypeQuntityResponse")]
        System.IO.MemoryStream GetAllTypeQuntity();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllTypeQuntity", ReplyAction="http://tempuri.org/Iservice/GetAllTypeQuntityResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllTypeQuntityAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllCurrencyInSupply", ReplyAction="http://tempuri.org/Iservice/GetAllCurrencyInSupplyResponse")]
        System.IO.MemoryStream GetAllCurrencyInSupply();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllCurrencyInSupply", ReplyAction="http://tempuri.org/Iservice/GetAllCurrencyInSupplyResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllCurrencyInSupplyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetQuntityInAccountInSupply", ReplyAction="http://tempuri.org/Iservice/GetQuntityInAccountInSupplyResponse")]
        int GetQuntityInAccountInSupply(int IDAcount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetQuntityInAccountInSupply", ReplyAction="http://tempuri.org/Iservice/GetQuntityInAccountInSupplyResponse")]
        System.Threading.Tasks.Task<int> GetQuntityInAccountInSupplyAsync(int IDAcount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/SearchINRequsetSupply", ReplyAction="http://tempuri.org/Iservice/SearchINRequsetSupplyResponse")]
        System.IO.MemoryStream SearchINRequsetSupply(string txt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/SearchINRequsetSupply", ReplyAction="http://tempuri.org/Iservice/SearchINRequsetSupplyResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> SearchINRequsetSupplyAsync(string txt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/SearchINRequsetSupplyTxtAndDate", ReplyAction="http://tempuri.org/Iservice/SearchINRequsetSupplyTxtAndDateResponse")]
        System.IO.MemoryStream SearchINRequsetSupplyTxtAndDate(string txt, System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/SearchINRequsetSupplyTxtAndDate", ReplyAction="http://tempuri.org/Iservice/SearchINRequsetSupplyTxtAndDateResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> SearchINRequsetSupplyTxtAndDateAsync(string txt, System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetRequstSupply", ReplyAction="http://tempuri.org/Iservice/GetRequstSupplyResponse")]
        System.IO.MemoryStream GetRequstSupply(int IDreqSup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetRequstSupply", ReplyAction="http://tempuri.org/Iservice/GetRequstSupplyResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetRequstSupplyAsync(int IDreqSup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/CheckQuntityISHereInCheckQuntity", ReplyAction="http://tempuri.org/Iservice/CheckQuntityISHereInCheckQuntityResponse")]
        int CheckQuntityISHereInCheckQuntity(int IDCategory, int IDType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/CheckQuntityISHereInCheckQuntity", ReplyAction="http://tempuri.org/Iservice/CheckQuntityISHereInCheckQuntityResponse")]
        System.Threading.Tasks.Task<int> CheckQuntityISHereInCheckQuntityAsync(int IDCategory, int IDType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/ADDNewUPDSupply", ReplyAction="http://tempuri.org/Iservice/ADDNewUPDSupplyResponse")]
        int ADDNewUPDSupply(int IDSup, int IDCategory, int IDType, int Quntity, int Price, int idcunnt, string NameSupply, System.DateTime dateAdd, System.DateTime dateUpd, string decNew, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/ADDNewUPDSupply", ReplyAction="http://tempuri.org/Iservice/ADDNewUPDSupplyResponse")]
        System.Threading.Tasks.Task<int> ADDNewUPDSupplyAsync(int IDSup, int IDCategory, int IDType, int Quntity, int Price, int idcunnt, string NameSupply, System.DateTime dateAdd, System.DateTime dateUpd, string decNew, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteRequstSupply", ReplyAction="http://tempuri.org/Iservice/DeleteRequstSupplyResponse")]
        int DeleteRequstSupply(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteRequstSupply", ReplyAction="http://tempuri.org/Iservice/DeleteRequstSupplyResponse")]
        System.Threading.Tasks.Task<int> DeleteRequstSupplyAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UPateRequstSupply", ReplyAction="http://tempuri.org/Iservice/UPateRequstSupplyResponse")]
        int UPateRequstSupply(int IDSup, int IDCategory, int IDType, int Quntity, int Price, int idcurrn, string NameSupply, string DescSupply, int debit, int crd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UPateRequstSupply", ReplyAction="http://tempuri.org/Iservice/UPateRequstSupplyResponse")]
        System.Threading.Tasks.Task<int> UPateRequstSupplyAsync(int IDSup, int IDCategory, int IDType, int Quntity, int Price, int idcurrn, string NameSupply, string DescSupply, int debit, int crd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetALLAcountNmInSupply", ReplyAction="http://tempuri.org/Iservice/GetALLAcountNmInSupplyResponse")]
        System.IO.MemoryStream GetALLAcountNmInSupply();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetALLAcountNmInSupply", ReplyAction="http://tempuri.org/Iservice/GetALLAcountNmInSupplyResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetALLAcountNmInSupplyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/CheckAccontTotalInSuuly", ReplyAction="http://tempuri.org/Iservice/CheckAccontTotalInSuulyResponse")]
        bool CheckAccontTotalInSuuly(int IDcode, int IDCurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/CheckAccontTotalInSuuly", ReplyAction="http://tempuri.org/Iservice/CheckAccontTotalInSuulyResponse")]
        System.Threading.Tasks.Task<bool> CheckAccontTotalInSuulyAsync(int IDcode, int IDCurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewAccountTotalInSuuply", ReplyAction="http://tempuri.org/Iservice/AddNewAccountTotalInSuuplyResponse")]
        int AddNewAccountTotalInSuuply(int IDCOde, int Mony, int idCurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewAccountTotalInSuuply", ReplyAction="http://tempuri.org/Iservice/AddNewAccountTotalInSuuplyResponse")]
        System.Threading.Tasks.Task<int> AddNewAccountTotalInSuuplyAsync(int IDCOde, int Mony, int idCurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetBalanceInSupply", ReplyAction="http://tempuri.org/Iservice/GetBalanceInSupplyResponse")]
        int GetBalanceInSupply(int Idcode, int IDCur);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetBalanceInSupply", ReplyAction="http://tempuri.org/Iservice/GetBalanceInSupplyResponse")]
        System.Threading.Tasks.Task<int> GetBalanceInSupplyAsync(int Idcode, int IDCur);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateAccountTotalInSupply", ReplyAction="http://tempuri.org/Iservice/UpdateAccountTotalInSupplyResponse")]
        int UpdateAccountTotalInSupply(int IDCOde, int Mony, int idCurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateAccountTotalInSupply", ReplyAction="http://tempuri.org/Iservice/UpdateAccountTotalInSupplyResponse")]
        System.Threading.Tasks.Task<int> UpdateAccountTotalInSupplyAsync(int IDCOde, int Mony, int idCurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewAccountDetalisINSupply", ReplyAction="http://tempuri.org/Iservice/AddNewAccountDetalisINSupplyResponse")]
        int AddNewAccountDetalisINSupply(int idcode, int monay, int idsupply, int idout, string Detalis, System.DateTime d1, int userid, int idCurrnt, int IDSimple);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewAccountDetalisINSupply", ReplyAction="http://tempuri.org/Iservice/AddNewAccountDetalisINSupplyResponse")]
        System.Threading.Tasks.Task<int> AddNewAccountDetalisINSupplyAsync(int idcode, int monay, int idsupply, int idout, string Detalis, System.DateTime d1, int userid, int idCurrnt, int IDSimple);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteSuuplyFrmAccountDitalisInSupply", ReplyAction="http://tempuri.org/Iservice/DeleteSuuplyFrmAccountDitalisInSupplyResponse")]
        int DeleteSuuplyFrmAccountDitalisInSupply(int idSupply);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteSuuplyFrmAccountDitalisInSupply", ReplyAction="http://tempuri.org/Iservice/DeleteSuuplyFrmAccountDitalisInSupplyResponse")]
        System.Threading.Tasks.Task<int> DeleteSuuplyFrmAccountDitalisInSupplyAsync(int idSupply);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteSuuplyFrmAccountDitalis2InSupply", ReplyAction="http://tempuri.org/Iservice/DeleteSuuplyFrmAccountDitalis2InSupplyResponse")]
        int DeleteSuuplyFrmAccountDitalis2InSupply(int idout);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteSuuplyFrmAccountDitalis2InSupply", ReplyAction="http://tempuri.org/Iservice/DeleteSuuplyFrmAccountDitalis2InSupplyResponse")]
        System.Threading.Tasks.Task<int> DeleteSuuplyFrmAccountDitalis2InSupplyAsync(int idout);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetCategoryByName", ReplyAction="http://tempuri.org/Iservice/GetCategoryByNameResponse")]
        System.IO.MemoryStream GetCategoryByName(string NMCate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetCategoryByName", ReplyAction="http://tempuri.org/Iservice/GetCategoryByNameResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetCategoryByNameAsync(string NMCate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewCategory", ReplyAction="http://tempuri.org/Iservice/AddNewCategoryResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.IO.MemoryStream))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.IO.Stream))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.MarshalByRefObject))]
        int AddNewCategory(string NameCategory, object IDAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewCategory", ReplyAction="http://tempuri.org/Iservice/AddNewCategoryResponse")]
        System.Threading.Tasks.Task<int> AddNewCategoryAsync(string NameCategory, object IDAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetMaxIDCate", ReplyAction="http://tempuri.org/Iservice/GetMaxIDCateResponse")]
        int GetMaxIDCate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetMaxIDCate", ReplyAction="http://tempuri.org/Iservice/GetMaxIDCateResponse")]
        System.Threading.Tasks.Task<int> GetMaxIDCateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateCategory", ReplyAction="http://tempuri.org/Iservice/UpdateCategoryResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.IO.MemoryStream))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.IO.Stream))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.MarshalByRefObject))]
        int UpdateCategory(int id, string name, object IDAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateCategory", ReplyAction="http://tempuri.org/Iservice/UpdateCategoryResponse")]
        System.Threading.Tasks.Task<int> UpdateCategoryAsync(int id, string name, object IDAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteCategory", ReplyAction="http://tempuri.org/Iservice/DeleteCategoryResponse")]
        int DeleteCategory(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteCategory", ReplyAction="http://tempuri.org/Iservice/DeleteCategoryResponse")]
        System.Threading.Tasks.Task<int> DeleteCategoryAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/chackCatagory", ReplyAction="http://tempuri.org/Iservice/chackCatagoryResponse")]
        System.IO.MemoryStream chackCatagory(int IDCA);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/chackCatagory", ReplyAction="http://tempuri.org/Iservice/chackCatagoryResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> chackCatagoryAsync(int IDCA);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllTypeQuntityInConf", ReplyAction="http://tempuri.org/Iservice/GetAllTypeQuntityInConfResponse")]
        System.IO.MemoryStream GetAllTypeQuntityInConf();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllTypeQuntityInConf", ReplyAction="http://tempuri.org/Iservice/GetAllTypeQuntityInConfResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllTypeQuntityInConfAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetTypeQuntityByName", ReplyAction="http://tempuri.org/Iservice/GetTypeQuntityByNameResponse")]
        System.IO.MemoryStream GetTypeQuntityByName(string nameTYPe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetTypeQuntityByName", ReplyAction="http://tempuri.org/Iservice/GetTypeQuntityByNameResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetTypeQuntityByNameAsync(string nameTYPe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewTypeQuntity", ReplyAction="http://tempuri.org/Iservice/AddNewTypeQuntityResponse")]
        int AddNewTypeQuntity(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewTypeQuntity", ReplyAction="http://tempuri.org/Iservice/AddNewTypeQuntityResponse")]
        System.Threading.Tasks.Task<int> AddNewTypeQuntityAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateTypeQuntity", ReplyAction="http://tempuri.org/Iservice/UpdateTypeQuntityResponse")]
        int UpdateTypeQuntity(int id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateTypeQuntity", ReplyAction="http://tempuri.org/Iservice/UpdateTypeQuntityResponse")]
        System.Threading.Tasks.Task<int> UpdateTypeQuntityAsync(int id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteQuntity", ReplyAction="http://tempuri.org/Iservice/DeleteQuntityResponse")]
        int DeleteQuntity(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeleteQuntity", ReplyAction="http://tempuri.org/Iservice/DeleteQuntityResponse")]
        System.Threading.Tasks.Task<int> DeleteQuntityAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/chackTapy", ReplyAction="http://tempuri.org/Iservice/chackTapyResponse")]
        System.IO.MemoryStream chackTapy(int IDtype);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/chackTapy", ReplyAction="http://tempuri.org/Iservice/chackTapyResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> chackTapyAsync(int IDtype);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetPlaceByName", ReplyAction="http://tempuri.org/Iservice/GetPlaceByNameResponse")]
        System.IO.MemoryStream GetPlaceByName(string NAMEPLACE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetPlaceByName", ReplyAction="http://tempuri.org/Iservice/GetPlaceByNameResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetPlaceByNameAsync(string NAMEPLACE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewPlaceSend", ReplyAction="http://tempuri.org/Iservice/AddNewPlaceSendResponse")]
        int AddNewPlaceSend(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewPlaceSend", ReplyAction="http://tempuri.org/Iservice/AddNewPlaceSendResponse")]
        System.Threading.Tasks.Task<int> AddNewPlaceSendAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdatePlaceSend", ReplyAction="http://tempuri.org/Iservice/UpdatePlaceSendResponse")]
        int UpdatePlaceSend(int id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdatePlaceSend", ReplyAction="http://tempuri.org/Iservice/UpdatePlaceSendResponse")]
        System.Threading.Tasks.Task<int> UpdatePlaceSendAsync(int id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeletePlaceSend", ReplyAction="http://tempuri.org/Iservice/DeletePlaceSendResponse")]
        int DeletePlaceSend(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DeletePlaceSend", ReplyAction="http://tempuri.org/Iservice/DeletePlaceSendResponse")]
        System.Threading.Tasks.Task<int> DeletePlaceSendAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/SENDUSERTOSERVER", ReplyAction="http://tempuri.org/Iservice/SENDUSERTOSERVERResponse")]
        void SENDUSERTOSERVER(int falg, int SessionID, System.DateTime start, System.DateTime end, string NameMachine, string UserWindow, string OSVersion, string NameUser, int USerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/SENDUSERTOSERVER", ReplyAction="http://tempuri.org/Iservice/SENDUSERTOSERVERResponse")]
        System.Threading.Tasks.Task SENDUSERTOSERVERAsync(int falg, int SessionID, System.DateTime start, System.DateTime end, string NameMachine, string UserWindow, string OSVersion, string NameUser, int USerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/LoginUser", ReplyAction="http://tempuri.org/Iservice/LoginUserResponse")]
        int LoginUser(string User, string Pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/LoginUser", ReplyAction="http://tempuri.org/Iservice/LoginUserResponse")]
        System.Threading.Tasks.Task<int> LoginUserAsync(string User, string Pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewUser", ReplyAction="http://tempuri.org/Iservice/AddNewUserResponse")]
        int AddNewUser(
                    string name, 
                    string user, 
                    string pass, 
                    bool Addsupply, 
                    bool UpdSupply, 
                    bool Addoutt, 
                    bool updOut, 
                    bool PrintSupply, 
                    bool PrintOut, 
                    bool PrintQuntity, 
                    bool UpdSupp1, 
                    bool UpdOut1, 
                    bool userAdd, 
                    bool Active, 
                    bool Cate, 
                    bool type1, 
                    bool account, 
                    bool Monay, 
                    bool Place, 
                    int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewUser", ReplyAction="http://tempuri.org/Iservice/AddNewUserResponse")]
        System.Threading.Tasks.Task<int> AddNewUserAsync(
                    string name, 
                    string user, 
                    string pass, 
                    bool Addsupply, 
                    bool UpdSupply, 
                    bool Addoutt, 
                    bool updOut, 
                    bool PrintSupply, 
                    bool PrintOut, 
                    bool PrintQuntity, 
                    bool UpdSupp1, 
                    bool UpdOut1, 
                    bool userAdd, 
                    bool Active, 
                    bool Cate, 
                    bool type1, 
                    bool account, 
                    bool Monay, 
                    bool Place, 
                    int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpatePassword", ReplyAction="http://tempuri.org/Iservice/UpatePasswordResponse")]
        int UpatePassword(int idUser, string Pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpatePassword", ReplyAction="http://tempuri.org/Iservice/UpatePasswordResponse")]
        System.Threading.Tasks.Task<int> UpatePasswordAsync(int idUser, string Pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdUsers", ReplyAction="http://tempuri.org/Iservice/UpdUsersResponse")]
        int UpdUsers(
                    int IDUser, 
                    string name, 
                    string user, 
                    string pass, 
                    bool Addsupply, 
                    bool UpdSupply, 
                    bool Addoutt, 
                    bool updOut, 
                    bool PrintSupply, 
                    bool PrintOut, 
                    bool PrintQuntity, 
                    bool UpdSupp1, 
                    bool UpdOut1, 
                    bool userAdd, 
                    bool Active, 
                    bool Cate, 
                    bool type1, 
                    bool account, 
                    bool Monay, 
                    bool Place);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdUsers", ReplyAction="http://tempuri.org/Iservice/UpdUsersResponse")]
        System.Threading.Tasks.Task<int> UpdUsersAsync(
                    int IDUser, 
                    string name, 
                    string user, 
                    string pass, 
                    bool Addsupply, 
                    bool UpdSupply, 
                    bool Addoutt, 
                    bool updOut, 
                    bool PrintSupply, 
                    bool PrintOut, 
                    bool PrintQuntity, 
                    bool UpdSupp1, 
                    bool UpdOut1, 
                    bool userAdd, 
                    bool Active, 
                    bool Cate, 
                    bool type1, 
                    bool account, 
                    bool Monay, 
                    bool Place);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllUser", ReplyAction="http://tempuri.org/Iservice/GetAllUserResponse")]
        System.IO.MemoryStream GetAllUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllUser", ReplyAction="http://tempuri.org/Iservice/GetAllUserResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUser", ReplyAction="http://tempuri.org/Iservice/GetUserResponse")]
        System.IO.MemoryStream GetUser(int IdUs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUser", ReplyAction="http://tempuri.org/Iservice/GetUserResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetUserAsync(int IdUs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllAccount", ReplyAction="http://tempuri.org/Iservice/GetAllAccountResponse")]
        System.IO.MemoryStream GetAllAccount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllAccount", ReplyAction="http://tempuri.org/Iservice/GetAllAccountResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllAccountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllAcountnAr", ReplyAction="http://tempuri.org/Iservice/GetAllAcountnArResponse")]
        System.IO.MemoryStream GetAllAcountnAr();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllAcountnAr", ReplyAction="http://tempuri.org/Iservice/GetAllAcountnArResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllAcountnArAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateAccountNm", ReplyAction="http://tempuri.org/Iservice/UpdateAccountNmResponse")]
        int UpdateAccountNm(int iDAccounNm, string Name, bool active);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateAccountNm", ReplyAction="http://tempuri.org/Iservice/UpdateAccountNmResponse")]
        System.Threading.Tasks.Task<int> UpdateAccountNmAsync(int iDAccounNm, string Name, bool active);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/CheckAccountinDetlis", ReplyAction="http://tempuri.org/Iservice/CheckAccountinDetlisResponse")]
        bool CheckAccountinDetlis(int idcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/CheckAccountinDetlis", ReplyAction="http://tempuri.org/Iservice/CheckAccountinDetlisResponse")]
        System.Threading.Tasks.Task<bool> CheckAccountinDetlisAsync(int idcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/CheckAccounthaschalid", ReplyAction="http://tempuri.org/Iservice/CheckAccounthaschalidResponse")]
        bool CheckAccounthaschalid(int idcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/CheckAccounthaschalid", ReplyAction="http://tempuri.org/Iservice/CheckAccounthaschalidResponse")]
        System.Threading.Tasks.Task<bool> CheckAccounthaschalidAsync(int idcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/TypeAccount", ReplyAction="http://tempuri.org/Iservice/TypeAccountResponse")]
        string TypeAccount(int IDAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/TypeAccount", ReplyAction="http://tempuri.org/Iservice/TypeAccountResponse")]
        System.Threading.Tasks.Task<string> TypeAccountAsync(int IDAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetCheckAccount", ReplyAction="http://tempuri.org/Iservice/GetCheckAccountResponse")]
        bool GetCheckAccount(int IDAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetCheckAccount", ReplyAction="http://tempuri.org/Iservice/GetCheckAccountResponse")]
        System.Threading.Tasks.Task<bool> GetCheckAccountAsync(int IDAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetCheckAccountHere", ReplyAction="http://tempuri.org/Iservice/GetCheckAccountHereResponse")]
        bool GetCheckAccountHere(int IDAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetCheckAccountHere", ReplyAction="http://tempuri.org/Iservice/GetCheckAccountHereResponse")]
        System.Threading.Tasks.Task<bool> GetCheckAccountHereAsync(int IDAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetMaxCode", ReplyAction="http://tempuri.org/Iservice/GetMaxCodeResponse")]
        int GetMaxCode(int CodeParent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetMaxCode", ReplyAction="http://tempuri.org/Iservice/GetMaxCodeResponse")]
        System.Threading.Tasks.Task<int> GetMaxCodeAsync(int CodeParent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewAcountNm", ReplyAction="http://tempuri.org/Iservice/AddNewAcountNmResponse")]
        int AddNewAcountNm(string AcountNm, int IdCOde, int IdParnt, string Type, int Active, System.DateTime DateStart, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewAcountNm", ReplyAction="http://tempuri.org/Iservice/AddNewAcountNmResponse")]
        System.Threading.Tasks.Task<int> AddNewAcountNmAsync(string AcountNm, int IdCOde, int IdParnt, string Type, int Active, System.DateTime DateStart, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DelteAccount", ReplyAction="http://tempuri.org/Iservice/DelteAccountResponse")]
        int DelteAccount(int IDCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DelteAccount", ReplyAction="http://tempuri.org/Iservice/DelteAccountResponse")]
        System.Threading.Tasks.Task<int> DelteAccountAsync(int IDCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DelteAccount2", ReplyAction="http://tempuri.org/Iservice/DelteAccount2Response")]
        int DelteAccount2(int IDcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/DelteAccount2", ReplyAction="http://tempuri.org/Iservice/DelteAccount2Response")]
        System.Threading.Tasks.Task<int> DelteAccount2Async(int IDcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/SearchAcount", ReplyAction="http://tempuri.org/Iservice/SearchAcountResponse")]
        System.IO.MemoryStream SearchAcount(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/SearchAcount", ReplyAction="http://tempuri.org/Iservice/SearchAcountResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> SearchAcountAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GETALLAccountPrime", ReplyAction="http://tempuri.org/Iservice/GETALLAccountPrimeResponse")]
        System.IO.MemoryStream GETALLAccountPrime();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GETALLAccountPrime", ReplyAction="http://tempuri.org/Iservice/GETALLAccountPrimeResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GETALLAccountPrimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GETALLAccountSub", ReplyAction="http://tempuri.org/Iservice/GETALLAccountSubResponse")]
        System.IO.MemoryStream GETALLAccountSub();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GETALLAccountSub", ReplyAction="http://tempuri.org/Iservice/GETALLAccountSubResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GETALLAccountSubAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllCurrency", ReplyAction="http://tempuri.org/Iservice/GetAllCurrencyResponse")]
        System.IO.MemoryStream GetAllCurrency();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllCurrency", ReplyAction="http://tempuri.org/Iservice/GetAllCurrencyResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllCurrencyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetBalanceAccount", ReplyAction="http://tempuri.org/Iservice/GetBalanceAccountResponse")]
        System.IO.MemoryStream GetBalanceAccount(int IDcode, int IDCurrncy, string NmIDcurrmcy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetBalanceAccount", ReplyAction="http://tempuri.org/Iservice/GetBalanceAccountResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetBalanceAccountAsync(int IDcode, int IDCurrncy, string NmIDcurrmcy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetBalanceAccountALLCunncy", ReplyAction="http://tempuri.org/Iservice/GetBalanceAccountALLCunncyResponse")]
        System.IO.MemoryStream GetBalanceAccountALLCunncy(int IDcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetBalanceAccountALLCunncy", ReplyAction="http://tempuri.org/Iservice/GetBalanceAccountALLCunncyResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetBalanceAccountALLCunncyAsync(int IDcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GETNMCurrncy", ReplyAction="http://tempuri.org/Iservice/GETNMCurrncyResponse")]
        string GETNMCurrncy(int IDCur);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GETNMCurrncy", ReplyAction="http://tempuri.org/Iservice/GETNMCurrncyResponse")]
        System.Threading.Tasks.Task<string> GETNMCurrncyAsync(int IDCur);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetBalanceALLAccountALLCunncy", ReplyAction="http://tempuri.org/Iservice/GetBalanceALLAccountALLCunncyResponse")]
        System.IO.MemoryStream GetBalanceALLAccountALLCunncy(int idcurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetBalanceALLAccountALLCunncy", ReplyAction="http://tempuri.org/Iservice/GetBalanceALLAccountALLCunncyResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetBalanceALLAccountALLCunncyAsync(int idcurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GETNMAccount", ReplyAction="http://tempuri.org/Iservice/GETNMAccountResponse")]
        System.IO.MemoryStream GETNMAccount(int IDCOde);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GETNMAccount", ReplyAction="http://tempuri.org/Iservice/GETNMAccountResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GETNMAccountAsync(int IDCOde);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GETAccountDitalis", ReplyAction="http://tempuri.org/Iservice/GETAccountDitalisResponse")]
        System.IO.MemoryStream GETAccountDitalis(int IDcode, int IDCurnncy, System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GETAccountDitalis", ReplyAction="http://tempuri.org/Iservice/GETAccountDitalisResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GETAccountDitalisAsync(int IDcode, int IDCurnncy, System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/getOldMony", ReplyAction="http://tempuri.org/Iservice/getOldMonyResponse")]
        int getOldMony(int IDcode, int IDCurnncy, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/getOldMony", ReplyAction="http://tempuri.org/Iservice/getOldMonyResponse")]
        System.Threading.Tasks.Task<int> getOldMonyAsync(int IDcode, int IDCurnncy, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GETAcountDitlis", ReplyAction="http://tempuri.org/Iservice/GETAcountDitlisResponse")]
        System.IO.MemoryStream GETAcountDitlis(int IDcode, int IDCurnncy, System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GETAcountDitlis", ReplyAction="http://tempuri.org/Iservice/GETAcountDitlisResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GETAcountDitlisAsync(int IDcode, int IDCurnncy, System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUserNM", ReplyAction="http://tempuri.org/Iservice/GetUserNMResponse")]
        string GetUserNM(int IDuser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetUserNM", ReplyAction="http://tempuri.org/Iservice/GetUserNMResponse")]
        System.Threading.Tasks.Task<string> GetUserNMAsync(int IDuser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetGroupsAsAccounts", ReplyAction="http://tempuri.org/Iservice/GetGroupsAsAccountsResponse")]
        System.IO.MemoryStream GetGroupsAsAccounts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetGroupsAsAccounts", ReplyAction="http://tempuri.org/Iservice/GetGroupsAsAccountsResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetGroupsAsAccountsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAccountesMOnayInGroup", ReplyAction="http://tempuri.org/Iservice/GetAccountesMOnayInGroupResponse")]
        System.IO.MemoryStream GetAccountesMOnayInGroup(int IDGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAccountesMOnayInGroup", ReplyAction="http://tempuri.org/Iservice/GetAccountesMOnayInGroupResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAccountesMOnayInGroupAsync(int IDGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/CheckAccontTotal", ReplyAction="http://tempuri.org/Iservice/CheckAccontTotalResponse")]
        bool CheckAccontTotal(int IDcode, int IDCurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/CheckAccontTotal", ReplyAction="http://tempuri.org/Iservice/CheckAccontTotalResponse")]
        System.Threading.Tasks.Task<bool> CheckAccontTotalAsync(int IDcode, int IDCurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetBalance", ReplyAction="http://tempuri.org/Iservice/GetBalanceResponse")]
        int GetBalance(int Idcode, int IDCur);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetBalance", ReplyAction="http://tempuri.org/Iservice/GetBalanceResponse")]
        System.Threading.Tasks.Task<int> GetBalanceAsync(int Idcode, int IDCur);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateAccountTotal", ReplyAction="http://tempuri.org/Iservice/UpdateAccountTotalResponse")]
        int UpdateAccountTotal(int IDCOde, int Mony, int idCurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateAccountTotal", ReplyAction="http://tempuri.org/Iservice/UpdateAccountTotalResponse")]
        System.Threading.Tasks.Task<int> UpdateAccountTotalAsync(int IDCOde, int Mony, int idCurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewAccountTotal", ReplyAction="http://tempuri.org/Iservice/AddNewAccountTotalResponse")]
        int AddNewAccountTotal(int IDCOde, int Mony, int idCurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewAccountTotal", ReplyAction="http://tempuri.org/Iservice/AddNewAccountTotalResponse")]
        System.Threading.Tasks.Task<int> AddNewAccountTotalAsync(int IDCOde, int Mony, int idCurrncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewAccountDetalis", ReplyAction="http://tempuri.org/Iservice/AddNewAccountDetalisResponse")]
        int AddNewAccountDetalis(int idcode, int monay, int idsupply, int idout, string Detalis, System.DateTime d1, int userid, int idCurrnt, int IDSimple);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewAccountDetalis", ReplyAction="http://tempuri.org/Iservice/AddNewAccountDetalisResponse")]
        System.Threading.Tasks.Task<int> AddNewAccountDetalisAsync(int idcode, int monay, int idsupply, int idout, string Detalis, System.DateTime d1, int userid, int idCurrnt, int IDSimple);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddSimpleConstraint", ReplyAction="http://tempuri.org/Iservice/AddSimpleConstraintResponse")]
        int AddSimpleConstraint(int IDdaan, int IdMAden, int Mony, int idCurnncy, int UserId, System.DateTime datetime, string Note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddSimpleConstraint", ReplyAction="http://tempuri.org/Iservice/AddSimpleConstraintResponse")]
        System.Threading.Tasks.Task<int> AddSimpleConstraintAsync(int IDdaan, int IdMAden, int Mony, int idCurnncy, int UserId, System.DateTime datetime, string Note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetMaxIDSimpleConstraint", ReplyAction="http://tempuri.org/Iservice/GetMaxIDSimpleConstraintResponse")]
        int GetMaxIDSimpleConstraint();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetMaxIDSimpleConstraint", ReplyAction="http://tempuri.org/Iservice/GetMaxIDSimpleConstraintResponse")]
        System.Threading.Tasks.Task<int> GetMaxIDSimpleConstraintAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllSimpleConstraintOneDay", ReplyAction="http://tempuri.org/Iservice/GetAllSimpleConstraintOneDayResponse")]
        System.IO.MemoryStream GetAllSimpleConstraintOneDay(System.DateTime day1, System.DateTime day2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllSimpleConstraintOneDay", ReplyAction="http://tempuri.org/Iservice/GetAllSimpleConstraintOneDayResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllSimpleConstraintOneDayAsync(System.DateTime day1, System.DateTime day2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintRequstOut", ReplyAction="http://tempuri.org/Iservice/PrintRequstOutResponse")]
        System.IO.MemoryStream PrintRequstOut(int Check, int UserId, int user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/PrintRequstOut", ReplyAction="http://tempuri.org/Iservice/PrintRequstOutResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> PrintRequstOutAsync(int Check, int UserId, int user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/printrequstOutExit", ReplyAction="http://tempuri.org/Iservice/printrequstOutExitResponse")]
        System.IO.MemoryStream printrequstOutExit(int Check, int UserId, int user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/printrequstOutExit", ReplyAction="http://tempuri.org/Iservice/printrequstOutExitResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> printrequstOutExitAsync(int Check, int UserId, int user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetIdUser", ReplyAction="http://tempuri.org/Iservice/GetIdUserResponse")]
        int GetIdUser(string NameUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetIdUser", ReplyAction="http://tempuri.org/Iservice/GetIdUserResponse")]
        System.Threading.Tasks.Task<int> GetIdUserAsync(string NameUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetCatagoryInAccount", ReplyAction="http://tempuri.org/Iservice/GetCatagoryInAccountResponse")]
        System.IO.MemoryStream GetCatagoryInAccount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetCatagoryInAccount", ReplyAction="http://tempuri.org/Iservice/GetCatagoryInAccountResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetCatagoryInAccountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAccountLinkCate", ReplyAction="http://tempuri.org/Iservice/GetAccountLinkCateResponse")]
        int GetAccountLinkCate(int IDcate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAccountLinkCate", ReplyAction="http://tempuri.org/Iservice/GetAccountLinkCateResponse")]
        System.Threading.Tasks.Task<int> GetAccountLinkCateAsync(int IDcate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllPlace", ReplyAction="http://tempuri.org/Iservice/GetAllPlaceResponse")]
        System.IO.MemoryStream GetAllPlace();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllPlace", ReplyAction="http://tempuri.org/Iservice/GetAllPlaceResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllPlaceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllDebit", ReplyAction="http://tempuri.org/Iservice/GetAllDebitResponse")]
        System.IO.MemoryStream GetAllDebit();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllDebit", ReplyAction="http://tempuri.org/Iservice/GetAllDebitResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllDebitAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllCreditor", ReplyAction="http://tempuri.org/Iservice/GetAllCreditorResponse")]
        System.IO.MemoryStream GetAllCreditor();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAllCreditor", ReplyAction="http://tempuri.org/Iservice/GetAllCreditorResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllCreditorAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/SearchINRequstOutDate", ReplyAction="http://tempuri.org/Iservice/SearchINRequstOutDateResponse")]
        System.IO.MemoryStream SearchINRequstOutDate(System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/SearchINRequstOutDate", ReplyAction="http://tempuri.org/Iservice/SearchINRequstOutDateResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> SearchINRequstOutDateAsync(System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetTypeInAccount", ReplyAction="http://tempuri.org/Iservice/GetTypeInAccountResponse")]
        System.IO.MemoryStream GetTypeInAccount(int IdCate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetTypeInAccount", ReplyAction="http://tempuri.org/Iservice/GetTypeInAccountResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetTypeInAccountAsync(int IdCate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetCurrencyINAccount", ReplyAction="http://tempuri.org/Iservice/GetCurrencyINAccountResponse")]
        System.IO.MemoryStream GetCurrencyINAccount(int idcat, int idtyp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetCurrencyINAccount", ReplyAction="http://tempuri.org/Iservice/GetCurrencyINAccountResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetCurrencyINAccountAsync(int idcat, int idtyp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAccountIDs", ReplyAction="http://tempuri.org/Iservice/GetAccountIDsResponse")]
        System.IO.MemoryStream GetAccountIDs(int IdCAte, int IdTpe, int idcurrnt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAccountIDs", ReplyAction="http://tempuri.org/Iservice/GetAccountIDsResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> GetAccountIDsAsync(int IdCAte, int IdTpe, int idcurrnt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetMaxCheckInRequsetOut", ReplyAction="http://tempuri.org/Iservice/GetMaxCheckInRequsetOutResponse")]
        int GetMaxCheckInRequsetOut();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetMaxCheckInRequsetOut", ReplyAction="http://tempuri.org/Iservice/GetMaxCheckInRequsetOutResponse")]
        System.Threading.Tasks.Task<int> GetMaxCheckInRequsetOutAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetQuntityInAccount", ReplyAction="http://tempuri.org/Iservice/GetQuntityInAccountResponse")]
        int GetQuntityInAccount(int IDAcount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetQuntityInAccount", ReplyAction="http://tempuri.org/Iservice/GetQuntityInAccountResponse")]
        System.Threading.Tasks.Task<int> GetQuntityInAccountAsync(int IDAcount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetPriceAccount", ReplyAction="http://tempuri.org/Iservice/GetPriceAccountResponse")]
        int GetPriceAccount(int iDAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetPriceAccount", ReplyAction="http://tempuri.org/Iservice/GetPriceAccountResponse")]
        System.Threading.Tasks.Task<int> GetPriceAccountAsync(int iDAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateQuntityAccount", ReplyAction="http://tempuri.org/Iservice/UpdateQuntityAccountResponse")]
        int UpdateQuntityAccount(int IDAccount, int newquntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/UpdateQuntityAccount", ReplyAction="http://tempuri.org/Iservice/UpdateQuntityAccountResponse")]
        System.Threading.Tasks.Task<int> UpdateQuntityAccountAsync(int IDAccount, int newquntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewRequstOut", ReplyAction="http://tempuri.org/Iservice/AddNewRequstOutResponse")]
        int AddNewRequstOut(int Quntity, int IDCategory, int IDType, int idcurrnt, int IDPlace, string NameOut, string DesOut, System.DateTime DateOut, int Chack, string NameSend, int price, int UserId, int debit, int cred);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/AddNewRequstOut", ReplyAction="http://tempuri.org/Iservice/AddNewRequstOutResponse")]
        System.Threading.Tasks.Task<int> AddNewRequstOutAsync(int Quntity, int IDCategory, int IDType, int idcurrnt, int IDPlace, string NameOut, string DesOut, System.DateTime DateOut, int Chack, string NameSend, int price, int UserId, int debit, int cred);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAndCheckQuntityAccountAndAddRqustNew", ReplyAction="http://tempuri.org/Iservice/GetAndCheckQuntityAccountAndAddRqustNewResponse")]
        int GetAndCheckQuntityAccountAndAddRqustNew(
                    int IDAccount, 
                    int QuntityMust, 
                    int IDCategory, 
                    int IDType, 
                    int idcurrn, 
                    int IDPlace, 
                    string NameOut, 
                    string DesOut, 
                    System.DateTime DateOut, 
                    int Chack, 
                    string NameSend, 
                    int debit, 
                    int credi, 
                    int UserId, 
                    string NMIDCA, 
                    string NMTYpe, 
                    string NMPlus, 
                    string NMMins, 
                    string nmCurnncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetAndCheckQuntityAccountAndAddRqustNew", ReplyAction="http://tempuri.org/Iservice/GetAndCheckQuntityAccountAndAddRqustNewResponse")]
        System.Threading.Tasks.Task<int> GetAndCheckQuntityAccountAndAddRqustNewAsync(
                    int IDAccount, 
                    int QuntityMust, 
                    int IDCategory, 
                    int IDType, 
                    int idcurrn, 
                    int IDPlace, 
                    string NameOut, 
                    string DesOut, 
                    System.DateTime DateOut, 
                    int Chack, 
                    string NameSend, 
                    int debit, 
                    int credi, 
                    int UserId, 
                    string NMIDCA, 
                    string NMTYpe, 
                    string NMPlus, 
                    string NMMins, 
                    string nmCurnncy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetQunitiyinAccount2", ReplyAction="http://tempuri.org/Iservice/GetQunitiyinAccount2Response")]
        int GetQunitiyinAccount2(int Idcae, int IdType, int idcurrnt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/GetQunitiyinAccount2", ReplyAction="http://tempuri.org/Iservice/GetQunitiyinAccount2Response")]
        System.Threading.Tasks.Task<int> GetQunitiyinAccount2Async(int Idcae, int IdType, int idcurrnt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/SearchINRequsetOuttxt", ReplyAction="http://tempuri.org/Iservice/SearchINRequsetOuttxtResponse")]
        System.IO.MemoryStream SearchINRequsetOuttxt(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/SearchINRequsetOuttxt", ReplyAction="http://tempuri.org/Iservice/SearchINRequsetOuttxtResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> SearchINRequsetOuttxtAsync(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/SearchINRequsetOutTxtAndDate", ReplyAction="http://tempuri.org/Iservice/SearchINRequsetOutTxtAndDateResponse")]
        System.IO.MemoryStream SearchINRequsetOutTxtAndDate(int s, System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/SearchINRequsetOutTxtAndDate", ReplyAction="http://tempuri.org/Iservice/SearchINRequsetOutTxtAndDateResponse")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> SearchINRequsetOutTxtAndDateAsync(int s, System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/SearchINRequsetOutTxtAndDate2", ReplyAction="http://tempuri.org/Iservice/SearchINRequsetOutTxtAndDate2Response")]
        System.IO.MemoryStream SearchINRequsetOutTxtAndDate2(string s, System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Iservice/SearchINRequsetOutTxtAndDate2", ReplyAction="http://tempuri.org/Iservice/SearchINRequsetOutTxtAndDate2Response")]
        System.Threading.Tasks.Task<System.IO.MemoryStream> SearchINRequsetOutTxtAndDate2Async(string s, System.DateTime d1, System.DateTime d2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IserviceChannel : Supplly.ServiceReference1.Iservice, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IserviceClient : System.ServiceModel.ClientBase<Supplly.ServiceReference1.Iservice>, Supplly.ServiceReference1.Iservice {
        
        public IserviceClient() {
        }
        
        public IserviceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IserviceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IserviceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IserviceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.IO.MemoryStream chackPlace(int IDplace) {
            return base.Channel.chackPlace(IDplace);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> chackPlaceAsync(int IDplace) {
            return base.Channel.chackPlaceAsync(IDplace);
        }
        
        public System.IO.MemoryStream GETCurrencyBYName(string NameCurrncy) {
            return base.Channel.GETCurrencyBYName(NameCurrncy);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GETCurrencyBYNameAsync(string NameCurrncy) {
            return base.Channel.GETCurrencyBYNameAsync(NameCurrncy);
        }
        
        public int AddNewCurrency(string name) {
            return base.Channel.AddNewCurrency(name);
        }
        
        public System.Threading.Tasks.Task<int> AddNewCurrencyAsync(string name) {
            return base.Channel.AddNewCurrencyAsync(name);
        }
        
        public int UpdateCurrency(int id, string name) {
            return base.Channel.UpdateCurrency(id, name);
        }
        
        public System.Threading.Tasks.Task<int> UpdateCurrencyAsync(int id, string name) {
            return base.Channel.UpdateCurrencyAsync(id, name);
        }
        
        public int DeleteCurrency(int id) {
            return base.Channel.DeleteCurrency(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteCurrencyAsync(int id) {
            return base.Channel.DeleteCurrencyAsync(id);
        }
        
        public System.IO.MemoryStream chackCurncy(int IDcur) {
            return base.Channel.chackCurncy(IDcur);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> chackCurncyAsync(int IDcur) {
            return base.Channel.chackCurncyAsync(IDcur);
        }
        
        public int AddNewGroup(int GroupSourceID, string GroupName, string GroupDescription, int UserID, System.DateTime EnterTime) {
            return base.Channel.AddNewGroup(GroupSourceID, GroupName, GroupDescription, UserID, EnterTime);
        }
        
        public System.Threading.Tasks.Task<int> AddNewGroupAsync(int GroupSourceID, string GroupName, string GroupDescription, int UserID, System.DateTime EnterTime) {
            return base.Channel.AddNewGroupAsync(GroupSourceID, GroupName, GroupDescription, UserID, EnterTime);
        }
        
        public System.IO.MemoryStream GetOneGroup(int IDGroup) {
            return base.Channel.GetOneGroup(IDGroup);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetOneGroupAsync(int IDGroup) {
            return base.Channel.GetOneGroupAsync(IDGroup);
        }
        
        public System.IO.MemoryStream GetAllGroup() {
            return base.Channel.GetAllGroup();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllGroupAsync() {
            return base.Channel.GetAllGroupAsync();
        }
        
        public System.IO.MemoryStream GetGroupByName(string NAME) {
            return base.Channel.GetGroupByName(NAME);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetGroupByNameAsync(string NAME) {
            return base.Channel.GetGroupByNameAsync(NAME);
        }
        
        public System.IO.MemoryStream DeleteGroup(int IDGROUP) {
            return base.Channel.DeleteGroup(IDGROUP);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> DeleteGroupAsync(int IDGROUP) {
            return base.Channel.DeleteGroupAsync(IDGROUP);
        }
        
        public bool CheckGroupItems(int IDGROUP) {
            return base.Channel.CheckGroupItems(IDGROUP);
        }
        
        public System.Threading.Tasks.Task<bool> CheckGroupItemsAsync(int IDGROUP) {
            return base.Channel.CheckGroupItemsAsync(IDGROUP);
        }
        
        public System.IO.MemoryStream GetSourecGroup() {
            return base.Channel.GetSourecGroup();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetSourecGroupAsync() {
            return base.Channel.GetSourecGroupAsync();
        }
        
        public int GetMaxIDGroup() {
            return base.Channel.GetMaxIDGroup();
        }
        
        public System.Threading.Tasks.Task<int> GetMaxIDGroupAsync() {
            return base.Channel.GetMaxIDGroupAsync();
        }
        
        public int UpdateGroup(int ID, int GroupSourceID, string GroupName, string GroupDescription, int UserID) {
            return base.Channel.UpdateGroup(ID, GroupSourceID, GroupName, GroupDescription, UserID);
        }
        
        public System.Threading.Tasks.Task<int> UpdateGroupAsync(int ID, int GroupSourceID, string GroupName, string GroupDescription, int UserID) {
            return base.Channel.UpdateGroupAsync(ID, GroupSourceID, GroupName, GroupDescription, UserID);
        }
        
        public System.IO.MemoryStream GetAllAccountSubNoInGroup(int GroupID) {
            return base.Channel.GetAllAccountSubNoInGroup(GroupID);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllAccountSubNoInGroupAsync(int GroupID) {
            return base.Channel.GetAllAccountSubNoInGroupAsync(GroupID);
        }
        
        public System.IO.MemoryStream GetAllAccountSubInGroup(int GroupID) {
            return base.Channel.GetAllAccountSubInGroup(GroupID);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllAccountSubInGroupAsync(int GroupID) {
            return base.Channel.GetAllAccountSubInGroupAsync(GroupID);
        }
        
        public int DeleteItemsONGroupDetalis(int IDGroup) {
            return base.Channel.DeleteItemsONGroupDetalis(IDGroup);
        }
        
        public System.Threading.Tasks.Task<int> DeleteItemsONGroupDetalisAsync(int IDGroup) {
            return base.Channel.DeleteItemsONGroupDetalisAsync(IDGroup);
        }
        
        public int AddItemsONGroupDetalis(int IDGroup, int IDItems, int UserID) {
            return base.Channel.AddItemsONGroupDetalis(IDGroup, IDItems, UserID);
        }
        
        public System.Threading.Tasks.Task<int> AddItemsONGroupDetalisAsync(int IDGroup, int IDItems, int UserID) {
            return base.Channel.AddItemsONGroupDetalisAsync(IDGroup, IDItems, UserID);
        }
        
        public int AddConnectionAccountwithPlace(int palce, int idMadeen, int idDaan) {
            return base.Channel.AddConnectionAccountwithPlace(palce, idMadeen, idDaan);
        }
        
        public System.Threading.Tasks.Task<int> AddConnectionAccountwithPlaceAsync(int palce, int idMadeen, int idDaan) {
            return base.Channel.AddConnectionAccountwithPlaceAsync(palce, idMadeen, idDaan);
        }
        
        public int UpdateConnectionAccountwithPlace(int ID, int palce, int idMadeen, int idDaan) {
            return base.Channel.UpdateConnectionAccountwithPlace(ID, palce, idMadeen, idDaan);
        }
        
        public System.Threading.Tasks.Task<int> UpdateConnectionAccountwithPlaceAsync(int ID, int palce, int idMadeen, int idDaan) {
            return base.Channel.UpdateConnectionAccountwithPlaceAsync(ID, palce, idMadeen, idDaan);
        }
        
        public int DeleteConnectionAccountwithPlace(int ID) {
            return base.Channel.DeleteConnectionAccountwithPlace(ID);
        }
        
        public System.Threading.Tasks.Task<int> DeleteConnectionAccountwithPlaceAsync(int ID) {
            return base.Channel.DeleteConnectionAccountwithPlaceAsync(ID);
        }
        
        public System.IO.MemoryStream GetConnectionAccountwithPlace() {
            return base.Channel.GetConnectionAccountwithPlace();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetConnectionAccountwithPlaceAsync() {
            return base.Channel.GetConnectionAccountwithPlaceAsync();
        }
        
        public System.IO.MemoryStream GetAllCategoryARWithAccount() {
            return base.Channel.GetAllCategoryARWithAccount();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllCategoryARWithAccountAsync() {
            return base.Channel.GetAllCategoryARWithAccountAsync();
        }
        
        public System.IO.MemoryStream GetGroupsCate() {
            return base.Channel.GetGroupsCate();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetGroupsCateAsync() {
            return base.Channel.GetGroupsCateAsync();
        }
        
        public System.IO.MemoryStream GetAllUserinReprt() {
            return base.Channel.GetAllUserinReprt();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllUserinReprtAsync() {
            return base.Channel.GetAllUserinReprtAsync();
        }
        
        public System.IO.MemoryStream GetAllUserAR() {
            return base.Channel.GetAllUserAR();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllUserARAsync() {
            return base.Channel.GetAllUserARAsync();
        }
        
        public System.IO.MemoryStream PrintRequstRPT(System.DateTime d1, System.DateTime d2, int IDCate, int IDType, int IDCurrn, string txt, int iduser) {
            return base.Channel.PrintRequstRPT(d1, d2, IDCate, IDType, IDCurrn, txt, iduser);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> PrintRequstRPTAsync(System.DateTime d1, System.DateTime d2, int IDCate, int IDType, int IDCurrn, string txt, int iduser) {
            return base.Channel.PrintRequstRPTAsync(d1, d2, IDCate, IDType, IDCurrn, txt, iduser);
        }
        
        public System.IO.MemoryStream PrintRequstRPTAll(System.DateTime d1, System.DateTime d2, string txt) {
            return base.Channel.PrintRequstRPTAll(d1, d2, txt);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> PrintRequstRPTAllAsync(System.DateTime d1, System.DateTime d2, string txt) {
            return base.Channel.PrintRequstRPTAllAsync(d1, d2, txt);
        }
        
        public System.IO.MemoryStream PrintRequstRPTIDcat(System.DateTime d1, System.DateTime d2, string txt, int IDCate) {
            return base.Channel.PrintRequstRPTIDcat(d1, d2, txt, IDCate);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> PrintRequstRPTIDcatAsync(System.DateTime d1, System.DateTime d2, string txt, int IDCate) {
            return base.Channel.PrintRequstRPTIDcatAsync(d1, d2, txt, IDCate);
        }
        
        public System.IO.MemoryStream PrintOutAllwithDate(int idca, int idtyp, int idpalce, int idcurrnt, string name, System.DateTime d1, System.DateTime d2, int iduser) {
            return base.Channel.PrintOutAllwithDate(idca, idtyp, idpalce, idcurrnt, name, d1, d2, iduser);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> PrintOutAllwithDateAsync(int idca, int idtyp, int idpalce, int idcurrnt, string name, System.DateTime d1, System.DateTime d2, int iduser) {
            return base.Channel.PrintOutAllwithDateAsync(idca, idtyp, idpalce, idcurrnt, name, d1, d2, iduser);
        }
        
        public System.IO.MemoryStream PrintOutAllwithDateAll(string name, System.DateTime d1, System.DateTime d2) {
            return base.Channel.PrintOutAllwithDateAll(name, d1, d2);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> PrintOutAllwithDateAllAsync(string name, System.DateTime d1, System.DateTime d2) {
            return base.Channel.PrintOutAllwithDateAllAsync(name, d1, d2);
        }
        
        public System.IO.MemoryStream PrintOutAllwithDateWithIDca(string name, System.DateTime d1, System.DateTime d2, int idca) {
            return base.Channel.PrintOutAllwithDateWithIDca(name, d1, d2, idca);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> PrintOutAllwithDateWithIDcaAsync(string name, System.DateTime d1, System.DateTime d2, int idca) {
            return base.Channel.PrintOutAllwithDateWithIDcaAsync(name, d1, d2, idca);
        }
        
        public System.IO.MemoryStream PrintOutAllwithDateWithIDcaPLAC(string name, System.DateTime d1, System.DateTime d2, int idca, int idpalce) {
            return base.Channel.PrintOutAllwithDateWithIDcaPLAC(name, d1, d2, idca, idpalce);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> PrintOutAllwithDateWithIDcaPLACAsync(string name, System.DateTime d1, System.DateTime d2, int idca, int idpalce) {
            return base.Channel.PrintOutAllwithDateWithIDcaPLACAsync(name, d1, d2, idca, idpalce);
        }
        
        public System.IO.MemoryStream PrintOutAllwithDateWithPLAC(string name, System.DateTime d1, System.DateTime d2, int idpalce) {
            return base.Channel.PrintOutAllwithDateWithPLAC(name, d1, d2, idpalce);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> PrintOutAllwithDateWithPLACAsync(string name, System.DateTime d1, System.DateTime d2, int idpalce) {
            return base.Channel.PrintOutAllwithDateWithPLACAsync(name, d1, d2, idpalce);
        }
        
        public System.IO.MemoryStream PrintAccountQuntity(int idcat, int idtyp, int idcu) {
            return base.Channel.PrintAccountQuntity(idcat, idtyp, idcu);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> PrintAccountQuntityAsync(int idcat, int idtyp, int idcu) {
            return base.Channel.PrintAccountQuntityAsync(idcat, idtyp, idcu);
        }
        
        public System.IO.MemoryStream PrintAccountQuntityIDac(int idcu) {
            return base.Channel.PrintAccountQuntityIDac(idcu);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> PrintAccountQuntityIDacAsync(int idcu) {
            return base.Channel.PrintAccountQuntityIDacAsync(idcu);
        }
        
        public System.IO.MemoryStream PrintAccountQuntityWithGroup(int IDGroup) {
            return base.Channel.PrintAccountQuntityWithGroup(IDGroup);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> PrintAccountQuntityWithGroupAsync(int IDGroup) {
            return base.Channel.PrintAccountQuntityWithGroupAsync(IDGroup);
        }
        
        public System.IO.MemoryStream PrintAccountQuntityAll() {
            return base.Channel.PrintAccountQuntityAll();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> PrintAccountQuntityAllAsync() {
            return base.Channel.PrintAccountQuntityAllAsync();
        }
        
        public System.IO.MemoryStream GetUpdateSupplyByIDSupply(int Id) {
            return base.Channel.GetUpdateSupplyByIDSupply(Id);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetUpdateSupplyByIDSupplyAsync(int Id) {
            return base.Channel.GetUpdateSupplyByIDSupplyAsync(Id);
        }
        
        public System.IO.MemoryStream GetUpdateSupplyByDate(System.DateTime d1, System.DateTime d2) {
            return base.Channel.GetUpdateSupplyByDate(d1, d2);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetUpdateSupplyByDateAsync(System.DateTime d1, System.DateTime d2) {
            return base.Channel.GetUpdateSupplyByDateAsync(d1, d2);
        }
        
        public System.IO.MemoryStream GetUpdateSupplyByDateUpdateWithDate(System.DateTime d1, System.DateTime d2) {
            return base.Channel.GetUpdateSupplyByDateUpdateWithDate(d1, d2);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetUpdateSupplyByDateUpdateWithDateAsync(System.DateTime d1, System.DateTime d2) {
            return base.Channel.GetUpdateSupplyByDateUpdateWithDateAsync(d1, d2);
        }
        
        public System.IO.MemoryStream GetUpdateSupplyByDateDeleteWithDate(System.DateTime d1, System.DateTime d2) {
            return base.Channel.GetUpdateSupplyByDateDeleteWithDate(d1, d2);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetUpdateSupplyByDateDeleteWithDateAsync(System.DateTime d1, System.DateTime d2) {
            return base.Channel.GetUpdateSupplyByDateDeleteWithDateAsync(d1, d2);
        }
        
        public System.IO.MemoryStream GetUpdtOutByIDOut(int idOUt) {
            return base.Channel.GetUpdtOutByIDOut(idOUt);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetUpdtOutByIDOutAsync(int idOUt) {
            return base.Channel.GetUpdtOutByIDOutAsync(idOUt);
        }
        
        public System.IO.MemoryStream GetUpdOutByDate(System.DateTime d1, System.DateTime d2) {
            return base.Channel.GetUpdOutByDate(d1, d2);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetUpdOutByDateAsync(System.DateTime d1, System.DateTime d2) {
            return base.Channel.GetUpdOutByDateAsync(d1, d2);
        }
        
        public System.IO.MemoryStream GetUpdOutByDateUpdtewithdate(System.DateTime d1, System.DateTime d2) {
            return base.Channel.GetUpdOutByDateUpdtewithdate(d1, d2);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetUpdOutByDateUpdtewithdateAsync(System.DateTime d1, System.DateTime d2) {
            return base.Channel.GetUpdOutByDateUpdtewithdateAsync(d1, d2);
        }
        
        public System.IO.MemoryStream GetUpdOutByDateDetle2tewithdate(System.DateTime d1, System.DateTime d2) {
            return base.Channel.GetUpdOutByDateDetle2tewithdate(d1, d2);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetUpdOutByDateDetle2tewithdateAsync(System.DateTime d1, System.DateTime d2) {
            return base.Channel.GetUpdOutByDateDetle2tewithdateAsync(d1, d2);
        }
        
        public int AddNewSession(System.DateTime strat, System.DateTime end, string OSversion, string NameMachin, string UserWindows, int UserID) {
            return base.Channel.AddNewSession(strat, end, OSversion, NameMachin, UserWindows, UserID);
        }
        
        public System.Threading.Tasks.Task<int> AddNewSessionAsync(System.DateTime strat, System.DateTime end, string OSversion, string NameMachin, string UserWindows, int UserID) {
            return base.Channel.AddNewSessionAsync(strat, end, OSversion, NameMachin, UserWindows, UserID);
        }
        
        public int UpdateENDtimeSession(int IDSession, System.DateTime End) {
            return base.Channel.UpdateENDtimeSession(IDSession, End);
        }
        
        public System.Threading.Tasks.Task<int> UpdateENDtimeSessionAsync(int IDSession, System.DateTime End) {
            return base.Channel.UpdateENDtimeSessionAsync(IDSession, End);
        }
        
        public int GETMAXIDSession() {
            return base.Channel.GETMAXIDSession();
        }
        
        public System.Threading.Tasks.Task<int> GETMAXIDSessionAsync() {
            return base.Channel.GETMAXIDSessionAsync();
        }
        
        public string GetUserNameBYIdUser(int IdUser) {
            return base.Channel.GetUserNameBYIdUser(IdUser);
        }
        
        public System.Threading.Tasks.Task<string> GetUserNameBYIdUserAsync(int IdUser) {
            return base.Channel.GetUserNameBYIdUserAsync(IdUser);
        }
        
        public System.IO.MemoryStream GetRequstOutSngle(int IDOutRequst) {
            return base.Channel.GetRequstOutSngle(IDOutRequst);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetRequstOutSngleAsync(int IDOutRequst) {
            return base.Channel.GetRequstOutSngleAsync(IDOutRequst);
        }
        
        public int AddNewUpdOut(int IDOut, int IdCate, int IdType, int IdPlace, int Quntity, string NameOUt, string NameSend, int Price, int IdCurrent, string TxtReson, System.DateTime DateUpdate, int UserId) {
            return base.Channel.AddNewUpdOut(IDOut, IdCate, IdType, IdPlace, Quntity, NameOUt, NameSend, Price, IdCurrent, TxtReson, DateUpdate, UserId);
        }
        
        public System.Threading.Tasks.Task<int> AddNewUpdOutAsync(int IDOut, int IdCate, int IdType, int IdPlace, int Quntity, string NameOUt, string NameSend, int Price, int IdCurrent, string TxtReson, System.DateTime DateUpdate, int UserId) {
            return base.Channel.AddNewUpdOutAsync(IDOut, IdCate, IdType, IdPlace, Quntity, NameOUt, NameSend, Price, IdCurrent, TxtReson, DateUpdate, UserId);
        }
        
        public int CheckAccountIsHere(int IDCategory, int IDType, int price, int idcurrnt) {
            return base.Channel.CheckAccountIsHere(IDCategory, IDType, price, idcurrnt);
        }
        
        public System.Threading.Tasks.Task<int> CheckAccountIsHereAsync(int IDCategory, int IDType, int price, int idcurrnt) {
            return base.Channel.CheckAccountIsHereAsync(IDCategory, IDType, price, idcurrnt);
        }
        
        public int DeleteRqustOut(int IdRequstOut, int IdUser) {
            return base.Channel.DeleteRqustOut(IdRequstOut, IdUser);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRqustOutAsync(int IdRequstOut, int IdUser) {
            return base.Channel.DeleteRqustOutAsync(IdRequstOut, IdUser);
        }
        
        public int UpdateRequstOut(int IDOut, int IdPlace, string NameOut, string NameSend, string Reson, System.DateTime d1, int UserId, int debt, int crd) {
            return base.Channel.UpdateRequstOut(IDOut, IdPlace, NameOut, NameSend, Reson, d1, UserId, debt, crd);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRequstOutAsync(int IDOut, int IdPlace, string NameOut, string NameSend, string Reson, System.DateTime d1, int UserId, int debt, int crd) {
            return base.Channel.UpdateRequstOutAsync(IDOut, IdPlace, NameOut, NameSend, Reson, d1, UserId, debt, crd);
        }
        
        public int GetMAxIDOUt() {
            return base.Channel.GetMAxIDOUt();
        }
        
        public System.Threading.Tasks.Task<int> GetMAxIDOUtAsync() {
            return base.Channel.GetMAxIDOUtAsync();
        }
        
        public System.IO.MemoryStream GetALLAcountNm() {
            return base.Channel.GetALLAcountNm();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetALLAcountNmAsync() {
            return base.Channel.GetALLAcountNmAsync();
        }
        
        public bool CheckAccontTotalInOut(int IDcode, int IDCurrncy) {
            return base.Channel.CheckAccontTotalInOut(IDcode, IDCurrncy);
        }
        
        public System.Threading.Tasks.Task<bool> CheckAccontTotalInOutAsync(int IDcode, int IDCurrncy) {
            return base.Channel.CheckAccontTotalInOutAsync(IDcode, IDCurrncy);
        }
        
        public int AddNewAccountTotalInOut(int IDCOde, int Mony, int idCurrncy) {
            return base.Channel.AddNewAccountTotalInOut(IDCOde, Mony, idCurrncy);
        }
        
        public System.Threading.Tasks.Task<int> AddNewAccountTotalInOutAsync(int IDCOde, int Mony, int idCurrncy) {
            return base.Channel.AddNewAccountTotalInOutAsync(IDCOde, Mony, idCurrncy);
        }
        
        public int GetBalanceInOut(int Idcode, int IDCur) {
            return base.Channel.GetBalanceInOut(Idcode, IDCur);
        }
        
        public System.Threading.Tasks.Task<int> GetBalanceInOutAsync(int Idcode, int IDCur) {
            return base.Channel.GetBalanceInOutAsync(Idcode, IDCur);
        }
        
        public int UpdateAccountTotalInOut(int IDCOde, int Mony, int idCurrncy) {
            return base.Channel.UpdateAccountTotalInOut(IDCOde, Mony, idCurrncy);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAccountTotalInOutAsync(int IDCOde, int Mony, int idCurrncy) {
            return base.Channel.UpdateAccountTotalInOutAsync(IDCOde, Mony, idCurrncy);
        }
        
        public int AddNewAccountDetalisInOut(int idcode, int monay, int idsupply, int idout, string Detalis, System.DateTime d1, int userid, int idcurrn) {
            return base.Channel.AddNewAccountDetalisInOut(idcode, monay, idsupply, idout, Detalis, d1, userid, idcurrn);
        }
        
        public System.Threading.Tasks.Task<int> AddNewAccountDetalisInOutAsync(int idcode, int monay, int idsupply, int idout, string Detalis, System.DateTime d1, int userid, int idcurrn) {
            return base.Channel.AddNewAccountDetalisInOutAsync(idcode, monay, idsupply, idout, Detalis, d1, userid, idcurrn);
        }
        
        public int DeleteSuuplyFrmAccountDitalis(int idSupply) {
            return base.Channel.DeleteSuuplyFrmAccountDitalis(idSupply);
        }
        
        public System.Threading.Tasks.Task<int> DeleteSuuplyFrmAccountDitalisAsync(int idSupply) {
            return base.Channel.DeleteSuuplyFrmAccountDitalisAsync(idSupply);
        }
        
        public int DeleteSuuplyFrmAccountDitalis2(int idout) {
            return base.Channel.DeleteSuuplyFrmAccountDitalis2(idout);
        }
        
        public System.Threading.Tasks.Task<int> DeleteSuuplyFrmAccountDitalis2Async(int idout) {
            return base.Channel.DeleteSuuplyFrmAccountDitalis2Async(idout);
        }
        
        public int GetIDAccountPalce(int IDACcount, int idplace) {
            return base.Channel.GetIDAccountPalce(IDACcount, idplace);
        }
        
        public System.Threading.Tasks.Task<int> GetIDAccountPalceAsync(int IDACcount, int idplace) {
            return base.Channel.GetIDAccountPalceAsync(IDACcount, idplace);
        }
        
        public int GetIdUserINSupply(string NameUser) {
            return base.Channel.GetIdUserINSupply(NameUser);
        }
        
        public System.Threading.Tasks.Task<int> GetIdUserINSupplyAsync(string NameUser) {
            return base.Channel.GetIdUserINSupplyAsync(NameUser);
        }
        
        public string GetUserNameBYIdUserINSupply(int IdUser) {
            return base.Channel.GetUserNameBYIdUserINSupply(IdUser);
        }
        
        public System.Threading.Tasks.Task<string> GetUserNameBYIdUserINSupplyAsync(int IdUser) {
            return base.Channel.GetUserNameBYIdUserINSupplyAsync(IdUser);
        }
        
        public System.IO.MemoryStream PrintRequstSupply(int IDreqSup, int UserId, int user) {
            return base.Channel.PrintRequstSupply(IDreqSup, UserId, user);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> PrintRequstSupplyAsync(int IDreqSup, int UserId, int user) {
            return base.Channel.PrintRequstSupplyAsync(IDreqSup, UserId, user);
        }
        
        public System.IO.MemoryStream printrequstOutExit1(int IDreqSup, int UserId, int user) {
            return base.Channel.printrequstOutExit1(IDreqSup, UserId, user);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> printrequstOutExit1Async(int IDreqSup, int UserId, int user) {
            return base.Channel.printrequstOutExit1Async(IDreqSup, UserId, user);
        }
        
        public int GetAccountLinkCateInSupply(int IDcate) {
            return base.Channel.GetAccountLinkCateInSupply(IDcate);
        }
        
        public System.Threading.Tasks.Task<int> GetAccountLinkCateInSupplyAsync(int IDcate) {
            return base.Channel.GetAccountLinkCateInSupplyAsync(IDcate);
        }
        
        public int AddNewRequsetSupply(int IDCategory, int IDType, int Quntity, int Price, int idcurrnt, string NameSupply, string DescSupply, System.DateTime DateSupply, int IDuser, int chek, int debi, int cred) {
            return base.Channel.AddNewRequsetSupply(IDCategory, IDType, Quntity, Price, idcurrnt, NameSupply, DescSupply, DateSupply, IDuser, chek, debi, cred);
        }
        
        public System.Threading.Tasks.Task<int> AddNewRequsetSupplyAsync(int IDCategory, int IDType, int Quntity, int Price, int idcurrnt, string NameSupply, string DescSupply, System.DateTime DateSupply, int IDuser, int chek, int debi, int cred) {
            return base.Channel.AddNewRequsetSupplyAsync(IDCategory, IDType, Quntity, Price, idcurrnt, NameSupply, DescSupply, DateSupply, IDuser, chek, debi, cred);
        }
        
        public int GetMaxIdSupply() {
            return base.Channel.GetMaxIdSupply();
        }
        
        public System.Threading.Tasks.Task<int> GetMaxIdSupplyAsync() {
            return base.Channel.GetMaxIdSupplyAsync();
        }
        
        public System.IO.MemoryStream SearchINRequsetSupplyDate(System.DateTime d1, System.DateTime d2) {
            return base.Channel.SearchINRequsetSupplyDate(d1, d2);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> SearchINRequsetSupplyDateAsync(System.DateTime d1, System.DateTime d2) {
            return base.Channel.SearchINRequsetSupplyDateAsync(d1, d2);
        }
        
        public System.IO.MemoryStream GetAllCreditorINSuplly() {
            return base.Channel.GetAllCreditorINSuplly();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllCreditorINSupllyAsync() {
            return base.Channel.GetAllCreditorINSupllyAsync();
        }
        
        public int CheckAccountIsHereInSuplly(int IDCategory, int IDType, int price, int idcurrnt) {
            return base.Channel.CheckAccountIsHereInSuplly(IDCategory, IDType, price, idcurrnt);
        }
        
        public System.Threading.Tasks.Task<int> CheckAccountIsHereInSupllyAsync(int IDCategory, int IDType, int price, int idcurrnt) {
            return base.Channel.CheckAccountIsHereInSupllyAsync(IDCategory, IDType, price, idcurrnt);
        }
        
        public int UpdateQuntityAccountInSuplly(int IDAccount, int newquntity) {
            return base.Channel.UpdateQuntityAccountInSuplly(IDAccount, newquntity);
        }
        
        public System.Threading.Tasks.Task<int> UpdateQuntityAccountInSupllyAsync(int IDAccount, int newquntity) {
            return base.Channel.UpdateQuntityAccountInSupllyAsync(IDAccount, newquntity);
        }
        
        public int AddNewAccount(int IDCategory, int IDType, int Quntity, int Price, int idcurrnt) {
            return base.Channel.AddNewAccount(IDCategory, IDType, Quntity, Price, idcurrnt);
        }
        
        public System.Threading.Tasks.Task<int> AddNewAccountAsync(int IDCategory, int IDType, int Quntity, int Price, int idcurrnt) {
            return base.Channel.AddNewAccountAsync(IDCategory, IDType, Quntity, Price, idcurrnt);
        }
        
        public int GetMaxCheckSupply() {
            return base.Channel.GetMaxCheckSupply();
        }
        
        public System.Threading.Tasks.Task<int> GetMaxCheckSupplyAsync() {
            return base.Channel.GetMaxCheckSupplyAsync();
        }
        
        public System.IO.MemoryStream GetAllCategoryAR() {
            return base.Channel.GetAllCategoryAR();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllCategoryARAsync() {
            return base.Channel.GetAllCategoryARAsync();
        }
        
        public System.IO.MemoryStream GetAllTypeQuntity() {
            return base.Channel.GetAllTypeQuntity();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllTypeQuntityAsync() {
            return base.Channel.GetAllTypeQuntityAsync();
        }
        
        public System.IO.MemoryStream GetAllCurrencyInSupply() {
            return base.Channel.GetAllCurrencyInSupply();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllCurrencyInSupplyAsync() {
            return base.Channel.GetAllCurrencyInSupplyAsync();
        }
        
        public int GetQuntityInAccountInSupply(int IDAcount) {
            return base.Channel.GetQuntityInAccountInSupply(IDAcount);
        }
        
        public System.Threading.Tasks.Task<int> GetQuntityInAccountInSupplyAsync(int IDAcount) {
            return base.Channel.GetQuntityInAccountInSupplyAsync(IDAcount);
        }
        
        public System.IO.MemoryStream SearchINRequsetSupply(string txt) {
            return base.Channel.SearchINRequsetSupply(txt);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> SearchINRequsetSupplyAsync(string txt) {
            return base.Channel.SearchINRequsetSupplyAsync(txt);
        }
        
        public System.IO.MemoryStream SearchINRequsetSupplyTxtAndDate(string txt, System.DateTime d1, System.DateTime d2) {
            return base.Channel.SearchINRequsetSupplyTxtAndDate(txt, d1, d2);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> SearchINRequsetSupplyTxtAndDateAsync(string txt, System.DateTime d1, System.DateTime d2) {
            return base.Channel.SearchINRequsetSupplyTxtAndDateAsync(txt, d1, d2);
        }
        
        public System.IO.MemoryStream GetRequstSupply(int IDreqSup) {
            return base.Channel.GetRequstSupply(IDreqSup);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetRequstSupplyAsync(int IDreqSup) {
            return base.Channel.GetRequstSupplyAsync(IDreqSup);
        }
        
        public int CheckQuntityISHereInCheckQuntity(int IDCategory, int IDType) {
            return base.Channel.CheckQuntityISHereInCheckQuntity(IDCategory, IDType);
        }
        
        public System.Threading.Tasks.Task<int> CheckQuntityISHereInCheckQuntityAsync(int IDCategory, int IDType) {
            return base.Channel.CheckQuntityISHereInCheckQuntityAsync(IDCategory, IDType);
        }
        
        public int ADDNewUPDSupply(int IDSup, int IDCategory, int IDType, int Quntity, int Price, int idcunnt, string NameSupply, System.DateTime dateAdd, System.DateTime dateUpd, string decNew, int userid) {
            return base.Channel.ADDNewUPDSupply(IDSup, IDCategory, IDType, Quntity, Price, idcunnt, NameSupply, dateAdd, dateUpd, decNew, userid);
        }
        
        public System.Threading.Tasks.Task<int> ADDNewUPDSupplyAsync(int IDSup, int IDCategory, int IDType, int Quntity, int Price, int idcunnt, string NameSupply, System.DateTime dateAdd, System.DateTime dateUpd, string decNew, int userid) {
            return base.Channel.ADDNewUPDSupplyAsync(IDSup, IDCategory, IDType, Quntity, Price, idcunnt, NameSupply, dateAdd, dateUpd, decNew, userid);
        }
        
        public int DeleteRequstSupply(int Id) {
            return base.Channel.DeleteRequstSupply(Id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRequstSupplyAsync(int Id) {
            return base.Channel.DeleteRequstSupplyAsync(Id);
        }
        
        public int UPateRequstSupply(int IDSup, int IDCategory, int IDType, int Quntity, int Price, int idcurrn, string NameSupply, string DescSupply, int debit, int crd) {
            return base.Channel.UPateRequstSupply(IDSup, IDCategory, IDType, Quntity, Price, idcurrn, NameSupply, DescSupply, debit, crd);
        }
        
        public System.Threading.Tasks.Task<int> UPateRequstSupplyAsync(int IDSup, int IDCategory, int IDType, int Quntity, int Price, int idcurrn, string NameSupply, string DescSupply, int debit, int crd) {
            return base.Channel.UPateRequstSupplyAsync(IDSup, IDCategory, IDType, Quntity, Price, idcurrn, NameSupply, DescSupply, debit, crd);
        }
        
        public System.IO.MemoryStream GetALLAcountNmInSupply() {
            return base.Channel.GetALLAcountNmInSupply();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetALLAcountNmInSupplyAsync() {
            return base.Channel.GetALLAcountNmInSupplyAsync();
        }
        
        public bool CheckAccontTotalInSuuly(int IDcode, int IDCurrncy) {
            return base.Channel.CheckAccontTotalInSuuly(IDcode, IDCurrncy);
        }
        
        public System.Threading.Tasks.Task<bool> CheckAccontTotalInSuulyAsync(int IDcode, int IDCurrncy) {
            return base.Channel.CheckAccontTotalInSuulyAsync(IDcode, IDCurrncy);
        }
        
        public int AddNewAccountTotalInSuuply(int IDCOde, int Mony, int idCurrncy) {
            return base.Channel.AddNewAccountTotalInSuuply(IDCOde, Mony, idCurrncy);
        }
        
        public System.Threading.Tasks.Task<int> AddNewAccountTotalInSuuplyAsync(int IDCOde, int Mony, int idCurrncy) {
            return base.Channel.AddNewAccountTotalInSuuplyAsync(IDCOde, Mony, idCurrncy);
        }
        
        public int GetBalanceInSupply(int Idcode, int IDCur) {
            return base.Channel.GetBalanceInSupply(Idcode, IDCur);
        }
        
        public System.Threading.Tasks.Task<int> GetBalanceInSupplyAsync(int Idcode, int IDCur) {
            return base.Channel.GetBalanceInSupplyAsync(Idcode, IDCur);
        }
        
        public int UpdateAccountTotalInSupply(int IDCOde, int Mony, int idCurrncy) {
            return base.Channel.UpdateAccountTotalInSupply(IDCOde, Mony, idCurrncy);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAccountTotalInSupplyAsync(int IDCOde, int Mony, int idCurrncy) {
            return base.Channel.UpdateAccountTotalInSupplyAsync(IDCOde, Mony, idCurrncy);
        }
        
        public int AddNewAccountDetalisINSupply(int idcode, int monay, int idsupply, int idout, string Detalis, System.DateTime d1, int userid, int idCurrnt, int IDSimple) {
            return base.Channel.AddNewAccountDetalisINSupply(idcode, monay, idsupply, idout, Detalis, d1, userid, idCurrnt, IDSimple);
        }
        
        public System.Threading.Tasks.Task<int> AddNewAccountDetalisINSupplyAsync(int idcode, int monay, int idsupply, int idout, string Detalis, System.DateTime d1, int userid, int idCurrnt, int IDSimple) {
            return base.Channel.AddNewAccountDetalisINSupplyAsync(idcode, monay, idsupply, idout, Detalis, d1, userid, idCurrnt, IDSimple);
        }
        
        public int DeleteSuuplyFrmAccountDitalisInSupply(int idSupply) {
            return base.Channel.DeleteSuuplyFrmAccountDitalisInSupply(idSupply);
        }
        
        public System.Threading.Tasks.Task<int> DeleteSuuplyFrmAccountDitalisInSupplyAsync(int idSupply) {
            return base.Channel.DeleteSuuplyFrmAccountDitalisInSupplyAsync(idSupply);
        }
        
        public int DeleteSuuplyFrmAccountDitalis2InSupply(int idout) {
            return base.Channel.DeleteSuuplyFrmAccountDitalis2InSupply(idout);
        }
        
        public System.Threading.Tasks.Task<int> DeleteSuuplyFrmAccountDitalis2InSupplyAsync(int idout) {
            return base.Channel.DeleteSuuplyFrmAccountDitalis2InSupplyAsync(idout);
        }
        
        public System.IO.MemoryStream GetCategoryByName(string NMCate) {
            return base.Channel.GetCategoryByName(NMCate);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetCategoryByNameAsync(string NMCate) {
            return base.Channel.GetCategoryByNameAsync(NMCate);
        }
        
        public int AddNewCategory(string NameCategory, object IDAccount) {
            return base.Channel.AddNewCategory(NameCategory, IDAccount);
        }
        
        public System.Threading.Tasks.Task<int> AddNewCategoryAsync(string NameCategory, object IDAccount) {
            return base.Channel.AddNewCategoryAsync(NameCategory, IDAccount);
        }
        
        public int GetMaxIDCate() {
            return base.Channel.GetMaxIDCate();
        }
        
        public System.Threading.Tasks.Task<int> GetMaxIDCateAsync() {
            return base.Channel.GetMaxIDCateAsync();
        }
        
        public int UpdateCategory(int id, string name, object IDAccount) {
            return base.Channel.UpdateCategory(id, name, IDAccount);
        }
        
        public System.Threading.Tasks.Task<int> UpdateCategoryAsync(int id, string name, object IDAccount) {
            return base.Channel.UpdateCategoryAsync(id, name, IDAccount);
        }
        
        public int DeleteCategory(int id) {
            return base.Channel.DeleteCategory(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteCategoryAsync(int id) {
            return base.Channel.DeleteCategoryAsync(id);
        }
        
        public System.IO.MemoryStream chackCatagory(int IDCA) {
            return base.Channel.chackCatagory(IDCA);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> chackCatagoryAsync(int IDCA) {
            return base.Channel.chackCatagoryAsync(IDCA);
        }
        
        public System.IO.MemoryStream GetAllTypeQuntityInConf() {
            return base.Channel.GetAllTypeQuntityInConf();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllTypeQuntityInConfAsync() {
            return base.Channel.GetAllTypeQuntityInConfAsync();
        }
        
        public System.IO.MemoryStream GetTypeQuntityByName(string nameTYPe) {
            return base.Channel.GetTypeQuntityByName(nameTYPe);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetTypeQuntityByNameAsync(string nameTYPe) {
            return base.Channel.GetTypeQuntityByNameAsync(nameTYPe);
        }
        
        public int AddNewTypeQuntity(string name) {
            return base.Channel.AddNewTypeQuntity(name);
        }
        
        public System.Threading.Tasks.Task<int> AddNewTypeQuntityAsync(string name) {
            return base.Channel.AddNewTypeQuntityAsync(name);
        }
        
        public int UpdateTypeQuntity(int id, string name) {
            return base.Channel.UpdateTypeQuntity(id, name);
        }
        
        public System.Threading.Tasks.Task<int> UpdateTypeQuntityAsync(int id, string name) {
            return base.Channel.UpdateTypeQuntityAsync(id, name);
        }
        
        public int DeleteQuntity(int id) {
            return base.Channel.DeleteQuntity(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteQuntityAsync(int id) {
            return base.Channel.DeleteQuntityAsync(id);
        }
        
        public System.IO.MemoryStream chackTapy(int IDtype) {
            return base.Channel.chackTapy(IDtype);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> chackTapyAsync(int IDtype) {
            return base.Channel.chackTapyAsync(IDtype);
        }
        
        public System.IO.MemoryStream GetPlaceByName(string NAMEPLACE) {
            return base.Channel.GetPlaceByName(NAMEPLACE);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetPlaceByNameAsync(string NAMEPLACE) {
            return base.Channel.GetPlaceByNameAsync(NAMEPLACE);
        }
        
        public int AddNewPlaceSend(string name) {
            return base.Channel.AddNewPlaceSend(name);
        }
        
        public System.Threading.Tasks.Task<int> AddNewPlaceSendAsync(string name) {
            return base.Channel.AddNewPlaceSendAsync(name);
        }
        
        public int UpdatePlaceSend(int id, string name) {
            return base.Channel.UpdatePlaceSend(id, name);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePlaceSendAsync(int id, string name) {
            return base.Channel.UpdatePlaceSendAsync(id, name);
        }
        
        public int DeletePlaceSend(int id) {
            return base.Channel.DeletePlaceSend(id);
        }
        
        public System.Threading.Tasks.Task<int> DeletePlaceSendAsync(int id) {
            return base.Channel.DeletePlaceSendAsync(id);
        }
        
        public void SENDUSERTOSERVER(int falg, int SessionID, System.DateTime start, System.DateTime end, string NameMachine, string UserWindow, string OSVersion, string NameUser, int USerID) {
            base.Channel.SENDUSERTOSERVER(falg, SessionID, start, end, NameMachine, UserWindow, OSVersion, NameUser, USerID);
        }
        
        public System.Threading.Tasks.Task SENDUSERTOSERVERAsync(int falg, int SessionID, System.DateTime start, System.DateTime end, string NameMachine, string UserWindow, string OSVersion, string NameUser, int USerID) {
            return base.Channel.SENDUSERTOSERVERAsync(falg, SessionID, start, end, NameMachine, UserWindow, OSVersion, NameUser, USerID);
        }
        
        public int LoginUser(string User, string Pass) {
            return base.Channel.LoginUser(User, Pass);
        }
        
        public System.Threading.Tasks.Task<int> LoginUserAsync(string User, string Pass) {
            return base.Channel.LoginUserAsync(User, Pass);
        }
        
        public int AddNewUser(
                    string name, 
                    string user, 
                    string pass, 
                    bool Addsupply, 
                    bool UpdSupply, 
                    bool Addoutt, 
                    bool updOut, 
                    bool PrintSupply, 
                    bool PrintOut, 
                    bool PrintQuntity, 
                    bool UpdSupp1, 
                    bool UpdOut1, 
                    bool userAdd, 
                    bool Active, 
                    bool Cate, 
                    bool type1, 
                    bool account, 
                    bool Monay, 
                    bool Place, 
                    int UserID) {
            return base.Channel.AddNewUser(name, user, pass, Addsupply, UpdSupply, Addoutt, updOut, PrintSupply, PrintOut, PrintQuntity, UpdSupp1, UpdOut1, userAdd, Active, Cate, type1, account, Monay, Place, UserID);
        }
        
        public System.Threading.Tasks.Task<int> AddNewUserAsync(
                    string name, 
                    string user, 
                    string pass, 
                    bool Addsupply, 
                    bool UpdSupply, 
                    bool Addoutt, 
                    bool updOut, 
                    bool PrintSupply, 
                    bool PrintOut, 
                    bool PrintQuntity, 
                    bool UpdSupp1, 
                    bool UpdOut1, 
                    bool userAdd, 
                    bool Active, 
                    bool Cate, 
                    bool type1, 
                    bool account, 
                    bool Monay, 
                    bool Place, 
                    int UserID) {
            return base.Channel.AddNewUserAsync(name, user, pass, Addsupply, UpdSupply, Addoutt, updOut, PrintSupply, PrintOut, PrintQuntity, UpdSupp1, UpdOut1, userAdd, Active, Cate, type1, account, Monay, Place, UserID);
        }
        
        public int UpatePassword(int idUser, string Pass) {
            return base.Channel.UpatePassword(idUser, Pass);
        }
        
        public System.Threading.Tasks.Task<int> UpatePasswordAsync(int idUser, string Pass) {
            return base.Channel.UpatePasswordAsync(idUser, Pass);
        }
        
        public int UpdUsers(
                    int IDUser, 
                    string name, 
                    string user, 
                    string pass, 
                    bool Addsupply, 
                    bool UpdSupply, 
                    bool Addoutt, 
                    bool updOut, 
                    bool PrintSupply, 
                    bool PrintOut, 
                    bool PrintQuntity, 
                    bool UpdSupp1, 
                    bool UpdOut1, 
                    bool userAdd, 
                    bool Active, 
                    bool Cate, 
                    bool type1, 
                    bool account, 
                    bool Monay, 
                    bool Place) {
            return base.Channel.UpdUsers(IDUser, name, user, pass, Addsupply, UpdSupply, Addoutt, updOut, PrintSupply, PrintOut, PrintQuntity, UpdSupp1, UpdOut1, userAdd, Active, Cate, type1, account, Monay, Place);
        }
        
        public System.Threading.Tasks.Task<int> UpdUsersAsync(
                    int IDUser, 
                    string name, 
                    string user, 
                    string pass, 
                    bool Addsupply, 
                    bool UpdSupply, 
                    bool Addoutt, 
                    bool updOut, 
                    bool PrintSupply, 
                    bool PrintOut, 
                    bool PrintQuntity, 
                    bool UpdSupp1, 
                    bool UpdOut1, 
                    bool userAdd, 
                    bool Active, 
                    bool Cate, 
                    bool type1, 
                    bool account, 
                    bool Monay, 
                    bool Place) {
            return base.Channel.UpdUsersAsync(IDUser, name, user, pass, Addsupply, UpdSupply, Addoutt, updOut, PrintSupply, PrintOut, PrintQuntity, UpdSupp1, UpdOut1, userAdd, Active, Cate, type1, account, Monay, Place);
        }
        
        public System.IO.MemoryStream GetAllUser() {
            return base.Channel.GetAllUser();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllUserAsync() {
            return base.Channel.GetAllUserAsync();
        }
        
        public System.IO.MemoryStream GetUser(int IdUs) {
            return base.Channel.GetUser(IdUs);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetUserAsync(int IdUs) {
            return base.Channel.GetUserAsync(IdUs);
        }
        
        public System.IO.MemoryStream GetAllAccount() {
            return base.Channel.GetAllAccount();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllAccountAsync() {
            return base.Channel.GetAllAccountAsync();
        }
        
        public System.IO.MemoryStream GetAllAcountnAr() {
            return base.Channel.GetAllAcountnAr();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllAcountnArAsync() {
            return base.Channel.GetAllAcountnArAsync();
        }
        
        public int UpdateAccountNm(int iDAccounNm, string Name, bool active) {
            return base.Channel.UpdateAccountNm(iDAccounNm, Name, active);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAccountNmAsync(int iDAccounNm, string Name, bool active) {
            return base.Channel.UpdateAccountNmAsync(iDAccounNm, Name, active);
        }
        
        public bool CheckAccountinDetlis(int idcode) {
            return base.Channel.CheckAccountinDetlis(idcode);
        }
        
        public System.Threading.Tasks.Task<bool> CheckAccountinDetlisAsync(int idcode) {
            return base.Channel.CheckAccountinDetlisAsync(idcode);
        }
        
        public bool CheckAccounthaschalid(int idcode) {
            return base.Channel.CheckAccounthaschalid(idcode);
        }
        
        public System.Threading.Tasks.Task<bool> CheckAccounthaschalidAsync(int idcode) {
            return base.Channel.CheckAccounthaschalidAsync(idcode);
        }
        
        public string TypeAccount(int IDAccount) {
            return base.Channel.TypeAccount(IDAccount);
        }
        
        public System.Threading.Tasks.Task<string> TypeAccountAsync(int IDAccount) {
            return base.Channel.TypeAccountAsync(IDAccount);
        }
        
        public bool GetCheckAccount(int IDAccount) {
            return base.Channel.GetCheckAccount(IDAccount);
        }
        
        public System.Threading.Tasks.Task<bool> GetCheckAccountAsync(int IDAccount) {
            return base.Channel.GetCheckAccountAsync(IDAccount);
        }
        
        public bool GetCheckAccountHere(int IDAccount) {
            return base.Channel.GetCheckAccountHere(IDAccount);
        }
        
        public System.Threading.Tasks.Task<bool> GetCheckAccountHereAsync(int IDAccount) {
            return base.Channel.GetCheckAccountHereAsync(IDAccount);
        }
        
        public int GetMaxCode(int CodeParent) {
            return base.Channel.GetMaxCode(CodeParent);
        }
        
        public System.Threading.Tasks.Task<int> GetMaxCodeAsync(int CodeParent) {
            return base.Channel.GetMaxCodeAsync(CodeParent);
        }
        
        public int AddNewAcountNm(string AcountNm, int IdCOde, int IdParnt, string Type, int Active, System.DateTime DateStart, int UserId) {
            return base.Channel.AddNewAcountNm(AcountNm, IdCOde, IdParnt, Type, Active, DateStart, UserId);
        }
        
        public System.Threading.Tasks.Task<int> AddNewAcountNmAsync(string AcountNm, int IdCOde, int IdParnt, string Type, int Active, System.DateTime DateStart, int UserId) {
            return base.Channel.AddNewAcountNmAsync(AcountNm, IdCOde, IdParnt, Type, Active, DateStart, UserId);
        }
        
        public int DelteAccount(int IDCount) {
            return base.Channel.DelteAccount(IDCount);
        }
        
        public System.Threading.Tasks.Task<int> DelteAccountAsync(int IDCount) {
            return base.Channel.DelteAccountAsync(IDCount);
        }
        
        public int DelteAccount2(int IDcode) {
            return base.Channel.DelteAccount2(IDcode);
        }
        
        public System.Threading.Tasks.Task<int> DelteAccount2Async(int IDcode) {
            return base.Channel.DelteAccount2Async(IDcode);
        }
        
        public System.IO.MemoryStream SearchAcount(string name) {
            return base.Channel.SearchAcount(name);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> SearchAcountAsync(string name) {
            return base.Channel.SearchAcountAsync(name);
        }
        
        public System.IO.MemoryStream GETALLAccountPrime() {
            return base.Channel.GETALLAccountPrime();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GETALLAccountPrimeAsync() {
            return base.Channel.GETALLAccountPrimeAsync();
        }
        
        public System.IO.MemoryStream GETALLAccountSub() {
            return base.Channel.GETALLAccountSub();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GETALLAccountSubAsync() {
            return base.Channel.GETALLAccountSubAsync();
        }
        
        public System.IO.MemoryStream GetAllCurrency() {
            return base.Channel.GetAllCurrency();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllCurrencyAsync() {
            return base.Channel.GetAllCurrencyAsync();
        }
        
        public System.IO.MemoryStream GetBalanceAccount(int IDcode, int IDCurrncy, string NmIDcurrmcy) {
            return base.Channel.GetBalanceAccount(IDcode, IDCurrncy, NmIDcurrmcy);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetBalanceAccountAsync(int IDcode, int IDCurrncy, string NmIDcurrmcy) {
            return base.Channel.GetBalanceAccountAsync(IDcode, IDCurrncy, NmIDcurrmcy);
        }
        
        public System.IO.MemoryStream GetBalanceAccountALLCunncy(int IDcode) {
            return base.Channel.GetBalanceAccountALLCunncy(IDcode);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetBalanceAccountALLCunncyAsync(int IDcode) {
            return base.Channel.GetBalanceAccountALLCunncyAsync(IDcode);
        }
        
        public string GETNMCurrncy(int IDCur) {
            return base.Channel.GETNMCurrncy(IDCur);
        }
        
        public System.Threading.Tasks.Task<string> GETNMCurrncyAsync(int IDCur) {
            return base.Channel.GETNMCurrncyAsync(IDCur);
        }
        
        public System.IO.MemoryStream GetBalanceALLAccountALLCunncy(int idcurrncy) {
            return base.Channel.GetBalanceALLAccountALLCunncy(idcurrncy);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetBalanceALLAccountALLCunncyAsync(int idcurrncy) {
            return base.Channel.GetBalanceALLAccountALLCunncyAsync(idcurrncy);
        }
        
        public System.IO.MemoryStream GETNMAccount(int IDCOde) {
            return base.Channel.GETNMAccount(IDCOde);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GETNMAccountAsync(int IDCOde) {
            return base.Channel.GETNMAccountAsync(IDCOde);
        }
        
        public System.IO.MemoryStream GETAccountDitalis(int IDcode, int IDCurnncy, System.DateTime d1, System.DateTime d2) {
            return base.Channel.GETAccountDitalis(IDcode, IDCurnncy, d1, d2);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GETAccountDitalisAsync(int IDcode, int IDCurnncy, System.DateTime d1, System.DateTime d2) {
            return base.Channel.GETAccountDitalisAsync(IDcode, IDCurnncy, d1, d2);
        }
        
        public int getOldMony(int IDcode, int IDCurnncy, System.DateTime d2) {
            return base.Channel.getOldMony(IDcode, IDCurnncy, d2);
        }
        
        public System.Threading.Tasks.Task<int> getOldMonyAsync(int IDcode, int IDCurnncy, System.DateTime d2) {
            return base.Channel.getOldMonyAsync(IDcode, IDCurnncy, d2);
        }
        
        public System.IO.MemoryStream GETAcountDitlis(int IDcode, int IDCurnncy, System.DateTime d1, System.DateTime d2) {
            return base.Channel.GETAcountDitlis(IDcode, IDCurnncy, d1, d2);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GETAcountDitlisAsync(int IDcode, int IDCurnncy, System.DateTime d1, System.DateTime d2) {
            return base.Channel.GETAcountDitlisAsync(IDcode, IDCurnncy, d1, d2);
        }
        
        public string GetUserNM(int IDuser) {
            return base.Channel.GetUserNM(IDuser);
        }
        
        public System.Threading.Tasks.Task<string> GetUserNMAsync(int IDuser) {
            return base.Channel.GetUserNMAsync(IDuser);
        }
        
        public System.IO.MemoryStream GetGroupsAsAccounts() {
            return base.Channel.GetGroupsAsAccounts();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetGroupsAsAccountsAsync() {
            return base.Channel.GetGroupsAsAccountsAsync();
        }
        
        public System.IO.MemoryStream GetAccountesMOnayInGroup(int IDGroup) {
            return base.Channel.GetAccountesMOnayInGroup(IDGroup);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAccountesMOnayInGroupAsync(int IDGroup) {
            return base.Channel.GetAccountesMOnayInGroupAsync(IDGroup);
        }
        
        public bool CheckAccontTotal(int IDcode, int IDCurrncy) {
            return base.Channel.CheckAccontTotal(IDcode, IDCurrncy);
        }
        
        public System.Threading.Tasks.Task<bool> CheckAccontTotalAsync(int IDcode, int IDCurrncy) {
            return base.Channel.CheckAccontTotalAsync(IDcode, IDCurrncy);
        }
        
        public int GetBalance(int Idcode, int IDCur) {
            return base.Channel.GetBalance(Idcode, IDCur);
        }
        
        public System.Threading.Tasks.Task<int> GetBalanceAsync(int Idcode, int IDCur) {
            return base.Channel.GetBalanceAsync(Idcode, IDCur);
        }
        
        public int UpdateAccountTotal(int IDCOde, int Mony, int idCurrncy) {
            return base.Channel.UpdateAccountTotal(IDCOde, Mony, idCurrncy);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAccountTotalAsync(int IDCOde, int Mony, int idCurrncy) {
            return base.Channel.UpdateAccountTotalAsync(IDCOde, Mony, idCurrncy);
        }
        
        public int AddNewAccountTotal(int IDCOde, int Mony, int idCurrncy) {
            return base.Channel.AddNewAccountTotal(IDCOde, Mony, idCurrncy);
        }
        
        public System.Threading.Tasks.Task<int> AddNewAccountTotalAsync(int IDCOde, int Mony, int idCurrncy) {
            return base.Channel.AddNewAccountTotalAsync(IDCOde, Mony, idCurrncy);
        }
        
        public int AddNewAccountDetalis(int idcode, int monay, int idsupply, int idout, string Detalis, System.DateTime d1, int userid, int idCurrnt, int IDSimple) {
            return base.Channel.AddNewAccountDetalis(idcode, monay, idsupply, idout, Detalis, d1, userid, idCurrnt, IDSimple);
        }
        
        public System.Threading.Tasks.Task<int> AddNewAccountDetalisAsync(int idcode, int monay, int idsupply, int idout, string Detalis, System.DateTime d1, int userid, int idCurrnt, int IDSimple) {
            return base.Channel.AddNewAccountDetalisAsync(idcode, monay, idsupply, idout, Detalis, d1, userid, idCurrnt, IDSimple);
        }
        
        public int AddSimpleConstraint(int IDdaan, int IdMAden, int Mony, int idCurnncy, int UserId, System.DateTime datetime, string Note) {
            return base.Channel.AddSimpleConstraint(IDdaan, IdMAden, Mony, idCurnncy, UserId, datetime, Note);
        }
        
        public System.Threading.Tasks.Task<int> AddSimpleConstraintAsync(int IDdaan, int IdMAden, int Mony, int idCurnncy, int UserId, System.DateTime datetime, string Note) {
            return base.Channel.AddSimpleConstraintAsync(IDdaan, IdMAden, Mony, idCurnncy, UserId, datetime, Note);
        }
        
        public int GetMaxIDSimpleConstraint() {
            return base.Channel.GetMaxIDSimpleConstraint();
        }
        
        public System.Threading.Tasks.Task<int> GetMaxIDSimpleConstraintAsync() {
            return base.Channel.GetMaxIDSimpleConstraintAsync();
        }
        
        public System.IO.MemoryStream GetAllSimpleConstraintOneDay(System.DateTime day1, System.DateTime day2) {
            return base.Channel.GetAllSimpleConstraintOneDay(day1, day2);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllSimpleConstraintOneDayAsync(System.DateTime day1, System.DateTime day2) {
            return base.Channel.GetAllSimpleConstraintOneDayAsync(day1, day2);
        }
        
        public System.IO.MemoryStream PrintRequstOut(int Check, int UserId, int user) {
            return base.Channel.PrintRequstOut(Check, UserId, user);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> PrintRequstOutAsync(int Check, int UserId, int user) {
            return base.Channel.PrintRequstOutAsync(Check, UserId, user);
        }
        
        public System.IO.MemoryStream printrequstOutExit(int Check, int UserId, int user) {
            return base.Channel.printrequstOutExit(Check, UserId, user);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> printrequstOutExitAsync(int Check, int UserId, int user) {
            return base.Channel.printrequstOutExitAsync(Check, UserId, user);
        }
        
        public int GetIdUser(string NameUser) {
            return base.Channel.GetIdUser(NameUser);
        }
        
        public System.Threading.Tasks.Task<int> GetIdUserAsync(string NameUser) {
            return base.Channel.GetIdUserAsync(NameUser);
        }
        
        public System.IO.MemoryStream GetCatagoryInAccount() {
            return base.Channel.GetCatagoryInAccount();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetCatagoryInAccountAsync() {
            return base.Channel.GetCatagoryInAccountAsync();
        }
        
        public int GetAccountLinkCate(int IDcate) {
            return base.Channel.GetAccountLinkCate(IDcate);
        }
        
        public System.Threading.Tasks.Task<int> GetAccountLinkCateAsync(int IDcate) {
            return base.Channel.GetAccountLinkCateAsync(IDcate);
        }
        
        public System.IO.MemoryStream GetAllPlace() {
            return base.Channel.GetAllPlace();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllPlaceAsync() {
            return base.Channel.GetAllPlaceAsync();
        }
        
        public System.IO.MemoryStream GetAllDebit() {
            return base.Channel.GetAllDebit();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllDebitAsync() {
            return base.Channel.GetAllDebitAsync();
        }
        
        public System.IO.MemoryStream GetAllCreditor() {
            return base.Channel.GetAllCreditor();
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAllCreditorAsync() {
            return base.Channel.GetAllCreditorAsync();
        }
        
        public System.IO.MemoryStream SearchINRequstOutDate(System.DateTime d1, System.DateTime d2) {
            return base.Channel.SearchINRequstOutDate(d1, d2);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> SearchINRequstOutDateAsync(System.DateTime d1, System.DateTime d2) {
            return base.Channel.SearchINRequstOutDateAsync(d1, d2);
        }
        
        public System.IO.MemoryStream GetTypeInAccount(int IdCate) {
            return base.Channel.GetTypeInAccount(IdCate);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetTypeInAccountAsync(int IdCate) {
            return base.Channel.GetTypeInAccountAsync(IdCate);
        }
        
        public System.IO.MemoryStream GetCurrencyINAccount(int idcat, int idtyp) {
            return base.Channel.GetCurrencyINAccount(idcat, idtyp);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetCurrencyINAccountAsync(int idcat, int idtyp) {
            return base.Channel.GetCurrencyINAccountAsync(idcat, idtyp);
        }
        
        public System.IO.MemoryStream GetAccountIDs(int IdCAte, int IdTpe, int idcurrnt) {
            return base.Channel.GetAccountIDs(IdCAte, IdTpe, idcurrnt);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> GetAccountIDsAsync(int IdCAte, int IdTpe, int idcurrnt) {
            return base.Channel.GetAccountIDsAsync(IdCAte, IdTpe, idcurrnt);
        }
        
        public int GetMaxCheckInRequsetOut() {
            return base.Channel.GetMaxCheckInRequsetOut();
        }
        
        public System.Threading.Tasks.Task<int> GetMaxCheckInRequsetOutAsync() {
            return base.Channel.GetMaxCheckInRequsetOutAsync();
        }
        
        public int GetQuntityInAccount(int IDAcount) {
            return base.Channel.GetQuntityInAccount(IDAcount);
        }
        
        public System.Threading.Tasks.Task<int> GetQuntityInAccountAsync(int IDAcount) {
            return base.Channel.GetQuntityInAccountAsync(IDAcount);
        }
        
        public int GetPriceAccount(int iDAccount) {
            return base.Channel.GetPriceAccount(iDAccount);
        }
        
        public System.Threading.Tasks.Task<int> GetPriceAccountAsync(int iDAccount) {
            return base.Channel.GetPriceAccountAsync(iDAccount);
        }
        
        public int UpdateQuntityAccount(int IDAccount, int newquntity) {
            return base.Channel.UpdateQuntityAccount(IDAccount, newquntity);
        }
        
        public System.Threading.Tasks.Task<int> UpdateQuntityAccountAsync(int IDAccount, int newquntity) {
            return base.Channel.UpdateQuntityAccountAsync(IDAccount, newquntity);
        }
        
        public int AddNewRequstOut(int Quntity, int IDCategory, int IDType, int idcurrnt, int IDPlace, string NameOut, string DesOut, System.DateTime DateOut, int Chack, string NameSend, int price, int UserId, int debit, int cred) {
            return base.Channel.AddNewRequstOut(Quntity, IDCategory, IDType, idcurrnt, IDPlace, NameOut, DesOut, DateOut, Chack, NameSend, price, UserId, debit, cred);
        }
        
        public System.Threading.Tasks.Task<int> AddNewRequstOutAsync(int Quntity, int IDCategory, int IDType, int idcurrnt, int IDPlace, string NameOut, string DesOut, System.DateTime DateOut, int Chack, string NameSend, int price, int UserId, int debit, int cred) {
            return base.Channel.AddNewRequstOutAsync(Quntity, IDCategory, IDType, idcurrnt, IDPlace, NameOut, DesOut, DateOut, Chack, NameSend, price, UserId, debit, cred);
        }
        
        public int GetAndCheckQuntityAccountAndAddRqustNew(
                    int IDAccount, 
                    int QuntityMust, 
                    int IDCategory, 
                    int IDType, 
                    int idcurrn, 
                    int IDPlace, 
                    string NameOut, 
                    string DesOut, 
                    System.DateTime DateOut, 
                    int Chack, 
                    string NameSend, 
                    int debit, 
                    int credi, 
                    int UserId, 
                    string NMIDCA, 
                    string NMTYpe, 
                    string NMPlus, 
                    string NMMins, 
                    string nmCurnncy) {
            return base.Channel.GetAndCheckQuntityAccountAndAddRqustNew(IDAccount, QuntityMust, IDCategory, IDType, idcurrn, IDPlace, NameOut, DesOut, DateOut, Chack, NameSend, debit, credi, UserId, NMIDCA, NMTYpe, NMPlus, NMMins, nmCurnncy);
        }
        
        public System.Threading.Tasks.Task<int> GetAndCheckQuntityAccountAndAddRqustNewAsync(
                    int IDAccount, 
                    int QuntityMust, 
                    int IDCategory, 
                    int IDType, 
                    int idcurrn, 
                    int IDPlace, 
                    string NameOut, 
                    string DesOut, 
                    System.DateTime DateOut, 
                    int Chack, 
                    string NameSend, 
                    int debit, 
                    int credi, 
                    int UserId, 
                    string NMIDCA, 
                    string NMTYpe, 
                    string NMPlus, 
                    string NMMins, 
                    string nmCurnncy) {
            return base.Channel.GetAndCheckQuntityAccountAndAddRqustNewAsync(IDAccount, QuntityMust, IDCategory, IDType, idcurrn, IDPlace, NameOut, DesOut, DateOut, Chack, NameSend, debit, credi, UserId, NMIDCA, NMTYpe, NMPlus, NMMins, nmCurnncy);
        }
        
        public int GetQunitiyinAccount2(int Idcae, int IdType, int idcurrnt) {
            return base.Channel.GetQunitiyinAccount2(Idcae, IdType, idcurrnt);
        }
        
        public System.Threading.Tasks.Task<int> GetQunitiyinAccount2Async(int Idcae, int IdType, int idcurrnt) {
            return base.Channel.GetQunitiyinAccount2Async(Idcae, IdType, idcurrnt);
        }
        
        public System.IO.MemoryStream SearchINRequsetOuttxt(string s) {
            return base.Channel.SearchINRequsetOuttxt(s);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> SearchINRequsetOuttxtAsync(string s) {
            return base.Channel.SearchINRequsetOuttxtAsync(s);
        }
        
        public System.IO.MemoryStream SearchINRequsetOutTxtAndDate(int s, System.DateTime d1, System.DateTime d2) {
            return base.Channel.SearchINRequsetOutTxtAndDate(s, d1, d2);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> SearchINRequsetOutTxtAndDateAsync(int s, System.DateTime d1, System.DateTime d2) {
            return base.Channel.SearchINRequsetOutTxtAndDateAsync(s, d1, d2);
        }
        
        public System.IO.MemoryStream SearchINRequsetOutTxtAndDate2(string s, System.DateTime d1, System.DateTime d2) {
            return base.Channel.SearchINRequsetOutTxtAndDate2(s, d1, d2);
        }
        
        public System.Threading.Tasks.Task<System.IO.MemoryStream> SearchINRequsetOutTxtAndDate2Async(string s, System.DateTime d1, System.DateTime d2) {
            return base.Channel.SearchINRequsetOutTxtAndDate2Async(s, d1, d2);
        }
    }
}
